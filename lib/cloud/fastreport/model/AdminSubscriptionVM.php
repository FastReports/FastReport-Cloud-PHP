<?php
/**
 * AdminSubscriptionVM
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdminSubscriptionVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AdminSubscriptionVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdminSubscriptionVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_permissions' => '\OpenAPI\Client\cloud\fastreport\model\DefaultPermissions',
        'id' => 'string',
        'name' => 'string',
        'locale' => 'string',
        'current' => '\OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM',
        'old' => '\OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM[]',
        'templates_folder' => '\OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder',
        'reports_folder' => '\OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder',
        'exports_folder' => '\OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_permissions' => null,
        'id' => null,
        'name' => null,
        'locale' => null,
        'current' => null,
        'old' => null,
        'templates_folder' => null,
        'reports_folder' => null,
        'exports_folder' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_permissions' => 'defaultPermissions',
        'id' => 'id',
        'name' => 'name',
        'locale' => 'locale',
        'current' => 'current',
        'old' => 'old',
        'templates_folder' => 'templatesFolder',
        'reports_folder' => 'reportsFolder',
        'exports_folder' => 'exportsFolder'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_permissions' => 'setDefaultPermissions',
        'id' => 'setId',
        'name' => 'setName',
        'locale' => 'setLocale',
        'current' => 'setCurrent',
        'old' => 'setOld',
        'templates_folder' => 'setTemplatesFolder',
        'reports_folder' => 'setReportsFolder',
        'exports_folder' => 'setExportsFolder'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_permissions' => 'getDefaultPermissions',
        'id' => 'getId',
        'name' => 'getName',
        'locale' => 'getLocale',
        'current' => 'getCurrent',
        'old' => 'getOld',
        'templates_folder' => 'getTemplatesFolder',
        'reports_folder' => 'getReportsFolder',
        'exports_folder' => 'getExportsFolder'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_permissions'] = $data['default_permissions'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['locale'] = $data['locale'] ?? null;
        $this->container['current'] = $data['current'] ?? null;
        $this->container['old'] = $data['old'] ?? null;
        $this->container['templates_folder'] = $data['templates_folder'] ?? null;
        $this->container['reports_folder'] = $data['reports_folder'] ?? null;
        $this->container['exports_folder'] = $data['exports_folder'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_permissions
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\DefaultPermissions|null
     */
    public function getDefaultPermissions()
    {
        return $this->container['default_permissions'];
    }

    /**
     * Sets default_permissions
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\DefaultPermissions|null $default_permissions default_permissions
     *
     * @return self
     */
    public function setDefaultPermissions($default_permissions)
    {
        $this->container['default_permissions'] = $default_permissions;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets current
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM|null
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM|null $current current
     *
     * @return self
     */
    public function setCurrent($current)
    {
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets old
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM[]|null
     */
    public function getOld()
    {
        return $this->container['old'];
    }

    /**
     * Sets old
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\SubscriptionPeriodVM[]|null $old old
     *
     * @return self
     */
    public function setOld($old)
    {
        $this->container['old'] = $old;

        return $this;
    }

    /**
     * Gets templates_folder
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null
     */
    public function getTemplatesFolder()
    {
        return $this->container['templates_folder'];
    }

    /**
     * Sets templates_folder
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null $templates_folder templates_folder
     *
     * @return self
     */
    public function setTemplatesFolder($templates_folder)
    {
        $this->container['templates_folder'] = $templates_folder;

        return $this;
    }

    /**
     * Gets reports_folder
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null
     */
    public function getReportsFolder()
    {
        return $this->container['reports_folder'];
    }

    /**
     * Sets reports_folder
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null $reports_folder reports_folder
     *
     * @return self
     */
    public function setReportsFolder($reports_folder)
    {
        $this->container['reports_folder'] = $reports_folder;

        return $this;
    }

    /**
     * Gets exports_folder
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null
     */
    public function getExportsFolder()
    {
        return $this->container['exports_folder'];
    }

    /**
     * Sets exports_folder
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\SubscriptionFolder|null $exports_folder exports_folder
     *
     * @return self
     */
    public function setExportsFolder($exports_folder)
    {
        $this->container['exports_folder'] = $exports_folder;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


