<?php
/**
 * DataSourceVM
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataSourceVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DataSourceVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataSourceVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'connection_type' => '\OpenAPI\Client\cloud\fastreport\model\DataSourceConnectionType',
        'connection_string' => 'string',
        'data_structure' => 'string',
        'subscription_id' => 'string',
        'edited_time' => '\DateTime',
        'editor_user_id' => 'string',
        'created_time' => '\DateTime',
        'creator_user_id' => 'string',
        'status' => '\OpenAPI\Client\cloud\fastreport\model\DataSourceStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'connection_type' => null,
        'connection_string' => null,
        'data_structure' => null,
        'subscription_id' => null,
        'edited_time' => 'date-time',
        'editor_user_id' => null,
        'created_time' => 'date-time',
        'creator_user_id' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'connection_type' => 'connectionType',
        'connection_string' => 'connectionString',
        'data_structure' => 'dataStructure',
        'subscription_id' => 'subscriptionId',
        'edited_time' => 'editedTime',
        'editor_user_id' => 'editorUserId',
        'created_time' => 'createdTime',
        'creator_user_id' => 'creatorUserId',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'connection_type' => 'setConnectionType',
        'connection_string' => 'setConnectionString',
        'data_structure' => 'setDataStructure',
        'subscription_id' => 'setSubscriptionId',
        'edited_time' => 'setEditedTime',
        'editor_user_id' => 'setEditorUserId',
        'created_time' => 'setCreatedTime',
        'creator_user_id' => 'setCreatorUserId',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'connection_type' => 'getConnectionType',
        'connection_string' => 'getConnectionString',
        'data_structure' => 'getDataStructure',
        'subscription_id' => 'getSubscriptionId',
        'edited_time' => 'getEditedTime',
        'editor_user_id' => 'getEditorUserId',
        'created_time' => 'getCreatedTime',
        'creator_user_id' => 'getCreatorUserId',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['connection_type'] = $data['connection_type'] ?? null;
        $this->container['connection_string'] = $data['connection_string'] ?? null;
        $this->container['data_structure'] = $data['data_structure'] ?? null;
        $this->container['subscription_id'] = $data['subscription_id'] ?? null;
        $this->container['edited_time'] = $data['edited_time'] ?? null;
        $this->container['editor_user_id'] = $data['editor_user_id'] ?? null;
        $this->container['created_time'] = $data['created_time'] ?? null;
        $this->container['creator_user_id'] = $data['creator_user_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\DataSourceConnectionType|null
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\DataSourceConnectionType|null $connection_type connection_type
     *
     * @return self
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets connection_string
     *
     * @return string|null
     */
    public function getConnectionString()
    {
        return $this->container['connection_string'];
    }

    /**
     * Sets connection_string
     *
     * @param string|null $connection_string connection_string
     *
     * @return self
     */
    public function setConnectionString($connection_string)
    {
        $this->container['connection_string'] = $connection_string;

        return $this;
    }

    /**
     * Gets data_structure
     *
     * @return string|null
     */
    public function getDataStructure()
    {
        return $this->container['data_structure'];
    }

    /**
     * Sets data_structure
     *
     * @param string|null $data_structure data_structure
     *
     * @return self
     */
    public function setDataStructure($data_structure)
    {
        $this->container['data_structure'] = $data_structure;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id subscription_id
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets edited_time
     *
     * @return \DateTime|null
     */
    public function getEditedTime()
    {
        return $this->container['edited_time'];
    }

    /**
     * Sets edited_time
     *
     * @param \DateTime|null $edited_time edited_time
     *
     * @return self
     */
    public function setEditedTime($edited_time)
    {
        $this->container['edited_time'] = $edited_time;

        return $this;
    }

    /**
     * Gets editor_user_id
     *
     * @return string|null
     */
    public function getEditorUserId()
    {
        return $this->container['editor_user_id'];
    }

    /**
     * Sets editor_user_id
     *
     * @param string|null $editor_user_id editor_user_id
     *
     * @return self
     */
    public function setEditorUserId($editor_user_id)
    {
        $this->container['editor_user_id'] = $editor_user_id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return \DateTime|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param \DateTime|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets creator_user_id
     *
     * @return string|null
     */
    public function getCreatorUserId()
    {
        return $this->container['creator_user_id'];
    }

    /**
     * Sets creator_user_id
     *
     * @param string|null $creator_user_id creator_user_id
     *
     * @return self
     */
    public function setCreatorUserId($creator_user_id)
    {
        $this->container['creator_user_id'] = $creator_user_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\DataSourceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\DataSourceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


