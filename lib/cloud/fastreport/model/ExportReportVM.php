<?php
/**
 * ExportReportVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportReportVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportReportVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportReportVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_name' => 'string',
        'folder_id' => 'string',
        'locale' => 'string',
        'pages_count' => 'int',
        'format' => '\OpenAPI\Client\cloud\fastreport\model\ExportFormat',
        'export_parameters' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'file_name' => null,
        'folder_id' => null,
        'locale' => null,
        'pages_count' => 'int32',
        'format' => null,
        'export_parameters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'file_name' => true,
		'folder_id' => true,
		'locale' => true,
		'pages_count' => true,
		'format' => false,
		'export_parameters' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_name' => 'fileName',
        'folder_id' => 'folderId',
        'locale' => 'locale',
        'pages_count' => 'pagesCount',
        'format' => 'format',
        'export_parameters' => 'exportParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_name' => 'setFileName',
        'folder_id' => 'setFolderId',
        'locale' => 'setLocale',
        'pages_count' => 'setPagesCount',
        'format' => 'setFormat',
        'export_parameters' => 'setExportParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_name' => 'getFileName',
        'folder_id' => 'getFolderId',
        'locale' => 'getLocale',
        'pages_count' => 'getPagesCount',
        'format' => 'getFormat',
        'export_parameters' => 'getExportParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('folder_id', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('pages_count', $data ?? [], null);
        $this->setIfExists('format', $data ?? [], null);
        $this->setIfExists('export_parameters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) > 250)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['file_name']) && (mb_strlen($this->container['file_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'file_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['folder_id']) && !preg_match("/(^$)|(^[A-Fa-f0-9]{24}$)/", $this->container['folder_id'])) {
            $invalidProperties[] = "invalid value for 'folder_id', must be conform to the pattern /(^$)|(^[A-Fa-f0-9]{24}$)/.";
        }

        if (!is_null($this->container['locale']) && !preg_match("/^[a-zA-Z]{2,4}(-[a-zA-Z]{2,4}){0,2}$/", $this->container['locale'])) {
            $invalidProperties[] = "invalid value for 'locale', must be conform to the pattern /^[a-zA-Z]{2,4}(-[a-zA-Z]{2,4}){0,2}$/.";
        }

        if (!is_null($this->container['pages_count']) && ($this->container['pages_count'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'pages_count', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['pages_count']) && ($this->container['pages_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'pages_count', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            array_push($this->openAPINullablesSetToNull, 'file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($file_name) && (mb_strlen($file_name) > 250)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling ExportReportVM., must be smaller than or equal to 250.');
        }
        if (!is_null($file_name) && (mb_strlen($file_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling ExportReportVM., must be bigger than or equal to 0.');
        }

        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets folder_id
     *
     * @return string|null
     */
    public function getFolderId()
    {
        return $this->container['folder_id'];
    }

    /**
     * Sets folder_id
     *
     * @param string|null $folder_id folder_id
     *
     * @return self
     */
    public function setFolderId($folder_id)
    {
        if (is_null($folder_id)) {
            array_push($this->openAPINullablesSetToNull, 'folder_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('folder_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($folder_id) && (!preg_match("/(^$)|(^[A-Fa-f0-9]{24}$)/", $folder_id))) {
            throw new \InvalidArgumentException("invalid value for \$folder_id when calling ExportReportVM., must conform to the pattern /(^$)|(^[A-Fa-f0-9]{24}$)/.");
        }

        $this->container['folder_id'] = $folder_id;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            array_push($this->openAPINullablesSetToNull, 'locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($locale) && (!preg_match("/^[a-zA-Z]{2,4}(-[a-zA-Z]{2,4}){0,2}$/", $locale))) {
            throw new \InvalidArgumentException("invalid value for \$locale when calling ExportReportVM., must conform to the pattern /^[a-zA-Z]{2,4}(-[a-zA-Z]{2,4}){0,2}$/.");
        }

        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets pages_count
     *
     * @return int|null
     */
    public function getPagesCount()
    {
        return $this->container['pages_count'];
    }

    /**
     * Sets pages_count
     *
     * @param int|null $pages_count pages_count
     *
     * @return self
     */
    public function setPagesCount($pages_count)
    {
        if (is_null($pages_count)) {
            array_push($this->openAPINullablesSetToNull, 'pages_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pages_count) && ($pages_count > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $pages_count when calling ExportReportVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($pages_count) && ($pages_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $pages_count when calling ExportReportVM., must be bigger than or equal to 0.');
        }

        $this->container['pages_count'] = $pages_count;

        return $this;
    }

    /**
     * Gets format
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\ExportFormat|null
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\ExportFormat|null $format format
     *
     * @return self
     */
    public function setFormat($format)
    {
        if (is_null($format)) {
            throw new \InvalidArgumentException('non-nullable format cannot be null');
        }
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets export_parameters
     *
     * @return array<string,string>|null
     */
    public function getExportParameters()
    {
        return $this->container['export_parameters'];
    }

    /**
     * Sets export_parameters
     *
     * @param array<string,string>|null $export_parameters export_parameters
     *
     * @return self
     */
    public function setExportParameters($export_parameters)
    {
        if (is_null($export_parameters)) {
            array_push($this->openAPINullablesSetToNull, 'export_parameters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_parameters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['export_parameters'] = $export_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


