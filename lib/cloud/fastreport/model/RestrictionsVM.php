<?php
/**
 * RestrictionsVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RestrictionsVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RestrictionsVM extends CloudBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RestrictionsVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expired_at' => '\DateTime',
        'valid_to' => '\DateTime',
        'pages_count' => 'int',
        'admins_count' => 'int',
        'subscriptions_count' => 'int',
        'designer_for_anons' => 'bool',
        'white_label' => 'bool',
        'is_demo' => 'bool',
        'sharing_enabled' => 'bool',
        'scheduler_enabled' => 'bool',
        'max_users_count' => 'int',
        'max_data_sources_count' => 'int',
        'max_groups_count' => 'int',
        'license' => 'string',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expired_at' => 'date-time',
        'valid_to' => 'date-time',
        'pages_count' => 'int32',
        'admins_count' => 'int32',
        'subscriptions_count' => 'int32',
        'designer_for_anons' => null,
        'white_label' => null,
        'is_demo' => null,
        'sharing_enabled' => null,
        'scheduler_enabled' => null,
        'max_users_count' => 'int32',
        'max_data_sources_count' => 'int32',
        'max_groups_count' => 'int32',
        'license' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'expired_at' => true,
        'valid_to' => true,
        'pages_count' => true,
        'admins_count' => true,
        'subscriptions_count' => true,
        'designer_for_anons' => true,
        'white_label' => true,
        'is_demo' => false,
        'sharing_enabled' => true,
        'scheduler_enabled' => true,
        'max_users_count' => true,
        'max_data_sources_count' => true,
        'max_groups_count' => true,
        'license' => true,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expired_at' => 'expiredAt',
        'valid_to' => 'validTo',
        'pages_count' => 'pagesCount',
        'admins_count' => 'adminsCount',
        'subscriptions_count' => 'subscriptionsCount',
        'designer_for_anons' => 'designerForAnons',
        'white_label' => 'whiteLabel',
        'is_demo' => 'isDemo',
        'sharing_enabled' => 'sharingEnabled',
        'scheduler_enabled' => 'schedulerEnabled',
        'max_users_count' => 'maxUsersCount',
        'max_data_sources_count' => 'maxDataSourcesCount',
        'max_groups_count' => 'maxGroupsCount',
        'license' => 'license',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expired_at' => 'setExpiredAt',
        'valid_to' => 'setValidTo',
        'pages_count' => 'setPagesCount',
        'admins_count' => 'setAdminsCount',
        'subscriptions_count' => 'setSubscriptionsCount',
        'designer_for_anons' => 'setDesignerForAnons',
        'white_label' => 'setWhiteLabel',
        'is_demo' => 'setIsDemo',
        'sharing_enabled' => 'setSharingEnabled',
        'scheduler_enabled' => 'setSchedulerEnabled',
        'max_users_count' => 'setMaxUsersCount',
        'max_data_sources_count' => 'setMaxDataSourcesCount',
        'max_groups_count' => 'setMaxGroupsCount',
        'license' => 'setLicense',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expired_at' => 'getExpiredAt',
        'valid_to' => 'getValidTo',
        'pages_count' => 'getPagesCount',
        'admins_count' => 'getAdminsCount',
        'subscriptions_count' => 'getSubscriptionsCount',
        'designer_for_anons' => 'getDesignerForAnons',
        'white_label' => 'getWhiteLabel',
        'is_demo' => 'getIsDemo',
        'sharing_enabled' => 'getSharingEnabled',
        'scheduler_enabled' => 'getSchedulerEnabled',
        'max_users_count' => 'getMaxUsersCount',
        'max_data_sources_count' => 'getMaxDataSourcesCount',
        'max_groups_count' => 'getMaxGroupsCount',
        'license' => 'getLicense',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('expired_at', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('pages_count', $data ?? [], null);
        $this->setIfExists('admins_count', $data ?? [], null);
        $this->setIfExists('subscriptions_count', $data ?? [], null);
        $this->setIfExists('designer_for_anons', $data ?? [], null);
        $this->setIfExists('white_label', $data ?? [], null);
        $this->setIfExists('is_demo', $data ?? [], null);
        $this->setIfExists('sharing_enabled', $data ?? [], null);
        $this->setIfExists('scheduler_enabled', $data ?? [], null);
        $this->setIfExists('max_users_count', $data ?? [], null);
        $this->setIfExists('max_data_sources_count', $data ?? [], null);
        $this->setIfExists('max_groups_count', $data ?? [], null);
        $this->setIfExists('license', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expired_at
     *
     * @return \DateTime|null
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param \DateTime|null $expired_at expired_at
     *
     * @return self
     */
    public function setExpiredAt($expired_at)
    {
        if (is_null($expired_at)) {
            array_push($this->openAPINullablesSetToNull, 'expired_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expired_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime|null
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime|null $valid_to valid_to
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            array_push($this->openAPINullablesSetToNull, 'valid_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets pages_count
     *
     * @return int|null
     */
    public function getPagesCount()
    {
        return $this->container['pages_count'];
    }

    /**
     * Sets pages_count
     *
     * @param int|null $pages_count pages_count
     *
     * @return self
     */
    public function setPagesCount($pages_count)
    {
        if (is_null($pages_count)) {
            array_push($this->openAPINullablesSetToNull, 'pages_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pages_count'] = $pages_count;

        return $this;
    }

    /**
     * Gets admins_count
     *
     * @return int|null
     */
    public function getAdminsCount()
    {
        return $this->container['admins_count'];
    }

    /**
     * Sets admins_count
     *
     * @param int|null $admins_count admins_count
     *
     * @return self
     */
    public function setAdminsCount($admins_count)
    {
        if (is_null($admins_count)) {
            array_push($this->openAPINullablesSetToNull, 'admins_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('admins_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['admins_count'] = $admins_count;

        return $this;
    }

    /**
     * Gets subscriptions_count
     *
     * @return int|null
     */
    public function getSubscriptionsCount()
    {
        return $this->container['subscriptions_count'];
    }

    /**
     * Sets subscriptions_count
     *
     * @param int|null $subscriptions_count subscriptions_count
     *
     * @return self
     */
    public function setSubscriptionsCount($subscriptions_count)
    {
        if (is_null($subscriptions_count)) {
            array_push($this->openAPINullablesSetToNull, 'subscriptions_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subscriptions_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subscriptions_count'] = $subscriptions_count;

        return $this;
    }

    /**
     * Gets designer_for_anons
     *
     * @return bool|null
     */
    public function getDesignerForAnons()
    {
        return $this->container['designer_for_anons'];
    }

    /**
     * Sets designer_for_anons
     *
     * @param bool|null $designer_for_anons designer_for_anons
     *
     * @return self
     */
    public function setDesignerForAnons($designer_for_anons)
    {
        if (is_null($designer_for_anons)) {
            array_push($this->openAPINullablesSetToNull, 'designer_for_anons');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('designer_for_anons', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['designer_for_anons'] = $designer_for_anons;

        return $this;
    }

    /**
     * Gets white_label
     *
     * @return bool|null
     */
    public function getWhiteLabel()
    {
        return $this->container['white_label'];
    }

    /**
     * Sets white_label
     *
     * @param bool|null $white_label white_label
     *
     * @return self
     */
    public function setWhiteLabel($white_label)
    {
        if (is_null($white_label)) {
            array_push($this->openAPINullablesSetToNull, 'white_label');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('white_label', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['white_label'] = $white_label;

        return $this;
    }

    /**
     * Gets is_demo
     *
     * @return bool|null
     */
    public function getIsDemo()
    {
        return $this->container['is_demo'];
    }

    /**
     * Sets is_demo
     *
     * @param bool|null $is_demo is_demo
     *
     * @return self
     */
    public function setIsDemo($is_demo)
    {
        if (is_null($is_demo)) {
            throw new \InvalidArgumentException('non-nullable is_demo cannot be null');
        }
        $this->container['is_demo'] = $is_demo;

        return $this;
    }

    /**
     * Gets sharing_enabled
     *
     * @return bool|null
     */
    public function getSharingEnabled()
    {
        return $this->container['sharing_enabled'];
    }

    /**
     * Sets sharing_enabled
     *
     * @param bool|null $sharing_enabled sharing_enabled
     *
     * @return self
     */
    public function setSharingEnabled($sharing_enabled)
    {
        if (is_null($sharing_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'sharing_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sharing_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sharing_enabled'] = $sharing_enabled;

        return $this;
    }

    /**
     * Gets scheduler_enabled
     *
     * @return bool|null
     */
    public function getSchedulerEnabled()
    {
        return $this->container['scheduler_enabled'];
    }

    /**
     * Sets scheduler_enabled
     *
     * @param bool|null $scheduler_enabled scheduler_enabled
     *
     * @return self
     */
    public function setSchedulerEnabled($scheduler_enabled)
    {
        if (is_null($scheduler_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'scheduler_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scheduler_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scheduler_enabled'] = $scheduler_enabled;

        return $this;
    }

    /**
     * Gets max_users_count
     *
     * @return int|null
     */
    public function getMaxUsersCount()
    {
        return $this->container['max_users_count'];
    }

    /**
     * Sets max_users_count
     *
     * @param int|null $max_users_count max_users_count
     *
     * @return self
     */
    public function setMaxUsersCount($max_users_count)
    {
        if (is_null($max_users_count)) {
            array_push($this->openAPINullablesSetToNull, 'max_users_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_users_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_users_count'] = $max_users_count;

        return $this;
    }

    /**
     * Gets max_data_sources_count
     *
     * @return int|null
     */
    public function getMaxDataSourcesCount()
    {
        return $this->container['max_data_sources_count'];
    }

    /**
     * Sets max_data_sources_count
     *
     * @param int|null $max_data_sources_count max_data_sources_count
     *
     * @return self
     */
    public function setMaxDataSourcesCount($max_data_sources_count)
    {
        if (is_null($max_data_sources_count)) {
            array_push($this->openAPINullablesSetToNull, 'max_data_sources_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_data_sources_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_data_sources_count'] = $max_data_sources_count;

        return $this;
    }

    /**
     * Gets max_groups_count
     *
     * @return int|null
     */
    public function getMaxGroupsCount()
    {
        return $this->container['max_groups_count'];
    }

    /**
     * Sets max_groups_count
     *
     * @param int|null $max_groups_count max_groups_count
     *
     * @return self
     */
    public function setMaxGroupsCount($max_groups_count)
    {
        if (is_null($max_groups_count)) {
            array_push($this->openAPINullablesSetToNull, 'max_groups_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_groups_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_groups_count'] = $max_groups_count;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string|null
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string|null $license license
     *
     * @return self
     */
    public function setLicense($license)
    {
        if (is_null($license)) {
            array_push($this->openAPINullablesSetToNull, 'license');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('license', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


