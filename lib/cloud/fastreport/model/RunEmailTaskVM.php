<?php
/**
 * RunEmailTaskVM
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RunEmailTaskVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RunEmailTaskVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RunEmailTaskVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'password' => 'string',
        'body' => 'string',
        'is_body_html' => 'bool',
        'subject' => 'string',
        'to' => 'string[]',
        'from' => 'string',
        'username' => 'string',
        'server' => 'string',
        'port' => 'int',
        'enable_ssl' => 'bool',
        'subscription_id' => 'string',
        'type' => '\OpenAPI\Client\cloud\fastreport\model\TaskType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'password' => null,
        'body' => null,
        'is_body_html' => null,
        'subject' => null,
        'to' => null,
        'from' => 'email',
        'username' => null,
        'server' => null,
        'port' => 'int32',
        'enable_ssl' => null,
        'subscription_id' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'password' => 'password',
        'body' => 'body',
        'is_body_html' => 'isBodyHtml',
        'subject' => 'subject',
        'to' => 'to',
        'from' => 'from',
        'username' => 'username',
        'server' => 'server',
        'port' => 'port',
        'enable_ssl' => 'enableSsl',
        'subscription_id' => 'subscriptionId',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'password' => 'setPassword',
        'body' => 'setBody',
        'is_body_html' => 'setIsBodyHtml',
        'subject' => 'setSubject',
        'to' => 'setTo',
        'from' => 'setFrom',
        'username' => 'setUsername',
        'server' => 'setServer',
        'port' => 'setPort',
        'enable_ssl' => 'setEnableSsl',
        'subscription_id' => 'setSubscriptionId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'password' => 'getPassword',
        'body' => 'getBody',
        'is_body_html' => 'getIsBodyHtml',
        'subject' => 'getSubject',
        'to' => 'getTo',
        'from' => 'getFrom',
        'username' => 'getUsername',
        'server' => 'getServer',
        'port' => 'getPort',
        'enable_ssl' => 'getEnableSsl',
        'subscription_id' => 'getSubscriptionId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['password'] = $data['password'] ?? null;
        $this->container['body'] = $data['body'] ?? null;
        $this->container['is_body_html'] = $data['is_body_html'] ?? null;
        $this->container['subject'] = $data['subject'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['server'] = $data['server'] ?? null;
        $this->container['port'] = $data['port'] ?? null;
        $this->container['enable_ssl'] = $data['enable_ssl'] ?? null;
        $this->container['subscription_id'] = $data['subscription_id'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 300)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 5)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['body']) && (mb_strlen($this->container['body']) > 384000)) {
            $invalidProperties[] = "invalid value for 'body', the character length must be smaller than or equal to 384000.";
        }

        if (!is_null($this->container['body']) && (mb_strlen($this->container['body']) < 1)) {
            $invalidProperties[] = "invalid value for 'body', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) > 1000)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['subject']) && (mb_strlen($this->container['subject']) < 1)) {
            $invalidProperties[] = "invalid value for 'subject', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['to']) && (count($this->container['to']) > 200)) {
            $invalidProperties[] = "invalid value for 'to', number of items must be less than or equal to 200.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 100)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) < 1)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) > 5000)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['server']) && (mb_strlen($this->container['server']) < 1)) {
            $invalidProperties[] = "invalid value for 'server', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'port', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['port']) && ($this->container['port'] < 0)) {
            $invalidProperties[] = "invalid value for 'port', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['subscription_id']) && !preg_match("/(^$)|(^[A-Fa-f0-9]{24}$)/", $this->container['subscription_id'])) {
            $invalidProperties[] = "invalid value for 'subscription_id', must be conform to the pattern /(^$)|(^[A-Fa-f0-9]{24}$)/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return self
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 300)) {
            throw new \InvalidArgumentException('invalid length for $password when calling RunEmailTaskVM., must be smaller than or equal to 300.');
        }
        if (!is_null($password) && (mb_strlen($password) < 5)) {
            throw new \InvalidArgumentException('invalid length for $password when calling RunEmailTaskVM., must be bigger than or equal to 5.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (!is_null($body) && (mb_strlen($body) > 384000)) {
            throw new \InvalidArgumentException('invalid length for $body when calling RunEmailTaskVM., must be smaller than or equal to 384000.');
        }
        if (!is_null($body) && (mb_strlen($body) < 1)) {
            throw new \InvalidArgumentException('invalid length for $body when calling RunEmailTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets is_body_html
     *
     * @return bool|null
     */
    public function getIsBodyHtml()
    {
        return $this->container['is_body_html'];
    }

    /**
     * Sets is_body_html
     *
     * @param bool|null $is_body_html is_body_html
     *
     * @return self
     */
    public function setIsBodyHtml($is_body_html)
    {
        $this->container['is_body_html'] = $is_body_html;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (!is_null($subject) && (mb_strlen($subject) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling RunEmailTaskVM., must be smaller than or equal to 1000.');
        }
        if (!is_null($subject) && (mb_strlen($subject) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subject when calling RunEmailTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string[]|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string[]|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {

        if (!is_null($to) && (count($to) > 200)) {
            throw new \InvalidArgumentException('invalid value for $to when calling RunEmailTaskVM., number of items must be less than or equal to 200.');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 100)) {
            throw new \InvalidArgumentException('invalid length for $username when calling RunEmailTaskVM., must be smaller than or equal to 100.');
        }
        if (!is_null($username) && (mb_strlen($username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $username when calling RunEmailTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string|null
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string|null $server server
     *
     * @return self
     */
    public function setServer($server)
    {
        if (!is_null($server) && (mb_strlen($server) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $server when calling RunEmailTaskVM., must be smaller than or equal to 5000.');
        }
        if (!is_null($server) && (mb_strlen($server) < 1)) {
            throw new \InvalidArgumentException('invalid length for $server when calling RunEmailTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets port
     *
     * @return int|null
     */
    public function getPort()
    {
        return $this->container['port'];
    }

    /**
     * Sets port
     *
     * @param int|null $port port
     *
     * @return self
     */
    public function setPort($port)
    {

        if (!is_null($port) && ($port > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $port when calling RunEmailTaskVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($port) && ($port < 0)) {
            throw new \InvalidArgumentException('invalid value for $port when calling RunEmailTaskVM., must be bigger than or equal to 0.');
        }

        $this->container['port'] = $port;

        return $this;
    }

    /**
     * Gets enable_ssl
     *
     * @return bool|null
     */
    public function getEnableSsl()
    {
        return $this->container['enable_ssl'];
    }

    /**
     * Sets enable_ssl
     *
     * @param bool|null $enable_ssl enable_ssl
     *
     * @return self
     */
    public function setEnableSsl($enable_ssl)
    {
        $this->container['enable_ssl'] = $enable_ssl;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string|null
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string|null $subscription_id subscription_id
     *
     * @return self
     */
    public function setSubscriptionId($subscription_id)
    {

        if (!is_null($subscription_id) && (!preg_match("/(^$)|(^[A-Fa-f0-9]{24}$)/", $subscription_id))) {
            throw new \InvalidArgumentException("invalid value for $subscription_id when calling RunEmailTaskVM., must conform to the pattern /(^$)|(^[A-Fa-f0-9]{24}$)/.");
        }

        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\TaskType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\TaskType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


