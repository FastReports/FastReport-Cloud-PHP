<?php
/**
 * RunFTPUploadTaskVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RunFTPUploadTaskVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RunFTPUploadTaskVM extends RunTransportTaskBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RunFTPUploadTaskVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archive' => 'bool',
        'archive_name' => 'string',
        'destination_folder' => 'string',
        'ftp_host' => 'string',
        'ftp_password' => 'string',
        'ftp_port' => 'int',
        'ftp_username' => 'string',
        'use_sftp' => 'bool',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archive' => null,
        'archive_name' => null,
        'destination_folder' => null,
        'ftp_host' => null,
        'ftp_password' => null,
        'ftp_port' => 'int32',
        'ftp_username' => null,
        'use_sftp' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archive' => false,
        'archive_name' => true,
        'destination_folder' => true,
        'ftp_host' => true,
        'ftp_password' => true,
        'ftp_port' => false,
        'ftp_username' => true,
        'use_sftp' => false,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archive' => 'archive',
        'archive_name' => 'archiveName',
        'destination_folder' => 'destinationFolder',
        'ftp_host' => 'ftpHost',
        'ftp_password' => 'ftpPassword',
        'ftp_port' => 'ftpPort',
        'ftp_username' => 'ftpUsername',
        'use_sftp' => 'useSFTP',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archive' => 'setArchive',
        'archive_name' => 'setArchiveName',
        'destination_folder' => 'setDestinationFolder',
        'ftp_host' => 'setFtpHost',
        'ftp_password' => 'setFtpPassword',
        'ftp_port' => 'setFtpPort',
        'ftp_username' => 'setFtpUsername',
        'use_sftp' => 'setUseSftp',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archive' => 'getArchive',
        'archive_name' => 'getArchiveName',
        'destination_folder' => 'getDestinationFolder',
        'ftp_host' => 'getFtpHost',
        'ftp_password' => 'getFtpPassword',
        'ftp_port' => 'getFtpPort',
        'ftp_username' => 'getFtpUsername',
        'use_sftp' => 'getUseSftp',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('archive', $data ?? [], null);
        $this->setIfExists('archive_name', $data ?? [], null);
        $this->setIfExists('destination_folder', $data ?? [], null);
        $this->setIfExists('ftp_host', $data ?? [], null);
        $this->setIfExists('ftp_password', $data ?? [], null);
        $this->setIfExists('ftp_port', $data ?? [], null);
        $this->setIfExists('ftp_username', $data ?? [], null);
        $this->setIfExists('use_sftp', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['ftp_host']) && (mb_strlen($this->container['ftp_host']) > 400)) {
            $invalidProperties[] = "invalid value for 'ftp_host', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['ftp_host']) && (mb_strlen($this->container['ftp_host']) < 1)) {
            $invalidProperties[] = "invalid value for 'ftp_host', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ftp_password']) && (mb_strlen($this->container['ftp_password']) > 300)) {
            $invalidProperties[] = "invalid value for 'ftp_password', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['ftp_password']) && (mb_strlen($this->container['ftp_password']) < 4)) {
            $invalidProperties[] = "invalid value for 'ftp_password', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['ftp_username']) && (mb_strlen($this->container['ftp_username']) > 300)) {
            $invalidProperties[] = "invalid value for 'ftp_username', the character length must be smaller than or equal to 300.";
        }

        if (!is_null($this->container['ftp_username']) && (mb_strlen($this->container['ftp_username']) < 1)) {
            $invalidProperties[] = "invalid value for 'ftp_username', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archive
     *
     * @return bool|null
     */
    public function getArchive()
    {
        return $this->container['archive'];
    }

    /**
     * Sets archive
     *
     * @param bool|null $archive archive
     *
     * @return self
     */
    public function setArchive($archive)
    {
        if (is_null($archive)) {
            throw new \InvalidArgumentException('non-nullable archive cannot be null');
        }
        $this->container['archive'] = $archive;

        return $this;
    }

    /**
     * Gets archive_name
     *
     * @return string|null
     */
    public function getArchiveName()
    {
        return $this->container['archive_name'];
    }

    /**
     * Sets archive_name
     *
     * @param string|null $archive_name archive_name
     *
     * @return self
     */
    public function setArchiveName($archive_name)
    {
        if (is_null($archive_name)) {
            array_push($this->openAPINullablesSetToNull, 'archive_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archive_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archive_name'] = $archive_name;

        return $this;
    }

    /**
     * Gets destination_folder
     *
     * @return string|null
     */
    public function getDestinationFolder()
    {
        return $this->container['destination_folder'];
    }

    /**
     * Sets destination_folder
     *
     * @param string|null $destination_folder destination_folder
     *
     * @return self
     */
    public function setDestinationFolder($destination_folder)
    {
        if (is_null($destination_folder)) {
            array_push($this->openAPINullablesSetToNull, 'destination_folder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_folder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_folder'] = $destination_folder;

        return $this;
    }

    /**
     * Gets ftp_host
     *
     * @return string|null
     */
    public function getFtpHost()
    {
        return $this->container['ftp_host'];
    }

    /**
     * Sets ftp_host
     *
     * @param string|null $ftp_host ftp_host
     *
     * @return self
     */
    public function setFtpHost($ftp_host)
    {
        if (is_null($ftp_host)) {
            array_push($this->openAPINullablesSetToNull, 'ftp_host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ftp_host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ftp_host) && (mb_strlen($ftp_host) > 400)) {
            throw new \InvalidArgumentException('invalid length for $ftp_host when calling RunFTPUploadTaskVM., must be smaller than or equal to 400.');
        }
        if (!is_null($ftp_host) && (mb_strlen($ftp_host) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ftp_host when calling RunFTPUploadTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['ftp_host'] = $ftp_host;

        return $this;
    }

    /**
     * Gets ftp_password
     *
     * @return string|null
     */
    public function getFtpPassword()
    {
        return $this->container['ftp_password'];
    }

    /**
     * Sets ftp_password
     *
     * @param string|null $ftp_password ftp_password
     *
     * @return self
     */
    public function setFtpPassword($ftp_password)
    {
        if (is_null($ftp_password)) {
            array_push($this->openAPINullablesSetToNull, 'ftp_password');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ftp_password', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ftp_password) && (mb_strlen($ftp_password) > 300)) {
            throw new \InvalidArgumentException('invalid length for $ftp_password when calling RunFTPUploadTaskVM., must be smaller than or equal to 300.');
        }
        if (!is_null($ftp_password) && (mb_strlen($ftp_password) < 4)) {
            throw new \InvalidArgumentException('invalid length for $ftp_password when calling RunFTPUploadTaskVM., must be bigger than or equal to 4.');
        }

        $this->container['ftp_password'] = $ftp_password;

        return $this;
    }

    /**
     * Gets ftp_port
     *
     * @return int|null
     */
    public function getFtpPort()
    {
        return $this->container['ftp_port'];
    }

    /**
     * Sets ftp_port
     *
     * @param int|null $ftp_port ftp_port
     *
     * @return self
     */
    public function setFtpPort($ftp_port)
    {
        if (is_null($ftp_port)) {
            throw new \InvalidArgumentException('non-nullable ftp_port cannot be null');
        }
        $this->container['ftp_port'] = $ftp_port;

        return $this;
    }

    /**
     * Gets ftp_username
     *
     * @return string|null
     */
    public function getFtpUsername()
    {
        return $this->container['ftp_username'];
    }

    /**
     * Sets ftp_username
     *
     * @param string|null $ftp_username ftp_username
     *
     * @return self
     */
    public function setFtpUsername($ftp_username)
    {
        if (is_null($ftp_username)) {
            array_push($this->openAPINullablesSetToNull, 'ftp_username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ftp_username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ftp_username) && (mb_strlen($ftp_username) > 300)) {
            throw new \InvalidArgumentException('invalid length for $ftp_username when calling RunFTPUploadTaskVM., must be smaller than or equal to 300.');
        }
        if (!is_null($ftp_username) && (mb_strlen($ftp_username) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ftp_username when calling RunFTPUploadTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['ftp_username'] = $ftp_username;

        return $this;
    }

    /**
     * Gets use_sftp
     *
     * @return bool|null
     */
    public function getUseSftp()
    {
        return $this->container['use_sftp'];
    }

    /**
     * Sets use_sftp
     *
     * @param bool|null $use_sftp use_sftp
     *
     * @return self
     */
    public function setUseSftp($use_sftp)
    {
        if (is_null($use_sftp)) {
            throw new \InvalidArgumentException('non-nullable use_sftp cannot be null');
        }
        $this->container['use_sftp'] = $use_sftp;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


