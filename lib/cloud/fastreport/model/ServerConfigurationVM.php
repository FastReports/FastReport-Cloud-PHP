<?php
/**
 * ServerConfigurationVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServerConfigurationVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServerConfigurationVM extends CloudBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServerConfigurationVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'company_name' => 'string',
        'logo_link' => 'string',
        'favicon_link' => 'string',
        'copyright' => 'string',
        'corporate_server_mode' => 'bool',
        'last_sla_version' => '\DateTime',
        'is_disabled' => 'bool',
        'frontend' => '\OpenAPI\Client\cloud\fastreport\model\FrontendAppVM',
        'invariant_locale' => 'string',
        'auth' => '\OpenAPI\Client\cloud\fastreport\model\AuthConfigVM',
        'designer_for_anons' => 'bool',
        'sla_link' => 'string',
        'first_steps_video_link' => 'string',
        'about_link' => 'string',
        'home_page_link' => 'string',
        'auth_server_name' => 'string',
        'update_workspace_link' => 'string',
        'sharing_enabled' => 'bool',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'company_name' => null,
        'logo_link' => null,
        'favicon_link' => null,
        'copyright' => null,
        'corporate_server_mode' => null,
        'last_sla_version' => 'date-time',
        'is_disabled' => null,
        'frontend' => null,
        'invariant_locale' => null,
        'auth' => null,
        'designer_for_anons' => null,
        'sla_link' => null,
        'first_steps_video_link' => null,
        'about_link' => null,
        'home_page_link' => null,
        'auth_server_name' => null,
        'update_workspace_link' => null,
        'sharing_enabled' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => true,
        'company_name' => true,
        'logo_link' => true,
        'favicon_link' => true,
        'copyright' => true,
        'corporate_server_mode' => false,
        'last_sla_version' => true,
        'is_disabled' => false,
        'frontend' => false,
        'invariant_locale' => true,
        'auth' => false,
        'designer_for_anons' => false,
        'sla_link' => true,
        'first_steps_video_link' => true,
        'about_link' => true,
        'home_page_link' => true,
        'auth_server_name' => true,
        'update_workspace_link' => true,
        'sharing_enabled' => false,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'company_name' => 'companyName',
        'logo_link' => 'logoLink',
        'favicon_link' => 'faviconLink',
        'copyright' => 'copyright',
        'corporate_server_mode' => 'corporateServerMode',
        'last_sla_version' => 'lastSLAVersion',
        'is_disabled' => 'isDisabled',
        'frontend' => 'frontend',
        'invariant_locale' => 'invariantLocale',
        'auth' => 'auth',
        'designer_for_anons' => 'designerForAnons',
        'sla_link' => 'slaLink',
        'first_steps_video_link' => 'firstStepsVideoLink',
        'about_link' => 'aboutLink',
        'home_page_link' => 'homePageLink',
        'auth_server_name' => 'authServerName',
        'update_workspace_link' => 'updateWorkspaceLink',
        'sharing_enabled' => 'sharingEnabled',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'company_name' => 'setCompanyName',
        'logo_link' => 'setLogoLink',
        'favicon_link' => 'setFaviconLink',
        'copyright' => 'setCopyright',
        'corporate_server_mode' => 'setCorporateServerMode',
        'last_sla_version' => 'setLastSlaVersion',
        'is_disabled' => 'setIsDisabled',
        'frontend' => 'setFrontend',
        'invariant_locale' => 'setInvariantLocale',
        'auth' => 'setAuth',
        'designer_for_anons' => 'setDesignerForAnons',
        'sla_link' => 'setSlaLink',
        'first_steps_video_link' => 'setFirstStepsVideoLink',
        'about_link' => 'setAboutLink',
        'home_page_link' => 'setHomePageLink',
        'auth_server_name' => 'setAuthServerName',
        'update_workspace_link' => 'setUpdateWorkspaceLink',
        'sharing_enabled' => 'setSharingEnabled',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'company_name' => 'getCompanyName',
        'logo_link' => 'getLogoLink',
        'favicon_link' => 'getFaviconLink',
        'copyright' => 'getCopyright',
        'corporate_server_mode' => 'getCorporateServerMode',
        'last_sla_version' => 'getLastSlaVersion',
        'is_disabled' => 'getIsDisabled',
        'frontend' => 'getFrontend',
        'invariant_locale' => 'getInvariantLocale',
        'auth' => 'getAuth',
        'designer_for_anons' => 'getDesignerForAnons',
        'sla_link' => 'getSlaLink',
        'first_steps_video_link' => 'getFirstStepsVideoLink',
        'about_link' => 'getAboutLink',
        'home_page_link' => 'getHomePageLink',
        'auth_server_name' => 'getAuthServerName',
        'update_workspace_link' => 'getUpdateWorkspaceLink',
        'sharing_enabled' => 'getSharingEnabled',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('logo_link', $data ?? [], null);
        $this->setIfExists('favicon_link', $data ?? [], null);
        $this->setIfExists('copyright', $data ?? [], null);
        $this->setIfExists('corporate_server_mode', $data ?? [], null);
        $this->setIfExists('last_sla_version', $data ?? [], null);
        $this->setIfExists('is_disabled', $data ?? [], null);
        $this->setIfExists('frontend', $data ?? [], null);
        $this->setIfExists('invariant_locale', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('designer_for_anons', $data ?? [], null);
        $this->setIfExists('sla_link', $data ?? [], null);
        $this->setIfExists('first_steps_video_link', $data ?? [], null);
        $this->setIfExists('about_link', $data ?? [], null);
        $this->setIfExists('home_page_link', $data ?? [], null);
        $this->setIfExists('auth_server_name', $data ?? [], null);
        $this->setIfExists('update_workspace_link', $data ?? [], null);
        $this->setIfExists('sharing_enabled', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            array_push($this->openAPINullablesSetToNull, 'company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets logo_link
     *
     * @return string|null
     */
    public function getLogoLink()
    {
        return $this->container['logo_link'];
    }

    /**
     * Sets logo_link
     *
     * @param string|null $logo_link logo_link
     *
     * @return self
     */
    public function setLogoLink($logo_link)
    {
        if (is_null($logo_link)) {
            array_push($this->openAPINullablesSetToNull, 'logo_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['logo_link'] = $logo_link;

        return $this;
    }

    /**
     * Gets favicon_link
     *
     * @return string|null
     */
    public function getFaviconLink()
    {
        return $this->container['favicon_link'];
    }

    /**
     * Sets favicon_link
     *
     * @param string|null $favicon_link favicon_link
     *
     * @return self
     */
    public function setFaviconLink($favicon_link)
    {
        if (is_null($favicon_link)) {
            array_push($this->openAPINullablesSetToNull, 'favicon_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('favicon_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['favicon_link'] = $favicon_link;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string|null
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string|null $copyright copyright
     *
     * @return self
     */
    public function setCopyright($copyright)
    {
        if (is_null($copyright)) {
            array_push($this->openAPINullablesSetToNull, 'copyright');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('copyright', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets corporate_server_mode
     *
     * @return bool|null
     */
    public function getCorporateServerMode()
    {
        return $this->container['corporate_server_mode'];
    }

    /**
     * Sets corporate_server_mode
     *
     * @param bool|null $corporate_server_mode corporate_server_mode
     *
     * @return self
     */
    public function setCorporateServerMode($corporate_server_mode)
    {
        if (is_null($corporate_server_mode)) {
            throw new \InvalidArgumentException('non-nullable corporate_server_mode cannot be null');
        }
        $this->container['corporate_server_mode'] = $corporate_server_mode;

        return $this;
    }

    /**
     * Gets last_sla_version
     *
     * @return \DateTime|null
     */
    public function getLastSlaVersion()
    {
        return $this->container['last_sla_version'];
    }

    /**
     * Sets last_sla_version
     *
     * @param \DateTime|null $last_sla_version last_sla_version
     *
     * @return self
     */
    public function setLastSlaVersion($last_sla_version)
    {
        if (is_null($last_sla_version)) {
            array_push($this->openAPINullablesSetToNull, 'last_sla_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_sla_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_sla_version'] = $last_sla_version;

        return $this;
    }

    /**
     * Gets is_disabled
     *
     * @return bool|null
     */
    public function getIsDisabled()
    {
        return $this->container['is_disabled'];
    }

    /**
     * Sets is_disabled
     *
     * @param bool|null $is_disabled is_disabled
     *
     * @return self
     */
    public function setIsDisabled($is_disabled)
    {
        if (is_null($is_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_disabled cannot be null');
        }
        $this->container['is_disabled'] = $is_disabled;

        return $this;
    }

    /**
     * Gets frontend
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\FrontendAppVM|null
     */
    public function getFrontend()
    {
        return $this->container['frontend'];
    }

    /**
     * Sets frontend
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\FrontendAppVM|null $frontend frontend
     *
     * @return self
     */
    public function setFrontend($frontend)
    {
        if (is_null($frontend)) {
            throw new \InvalidArgumentException('non-nullable frontend cannot be null');
        }
        $this->container['frontend'] = $frontend;

        return $this;
    }

    /**
     * Gets invariant_locale
     *
     * @return string|null
     */
    public function getInvariantLocale()
    {
        return $this->container['invariant_locale'];
    }

    /**
     * Sets invariant_locale
     *
     * @param string|null $invariant_locale invariant_locale
     *
     * @return self
     */
    public function setInvariantLocale($invariant_locale)
    {
        if (is_null($invariant_locale)) {
            array_push($this->openAPINullablesSetToNull, 'invariant_locale');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invariant_locale', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invariant_locale'] = $invariant_locale;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\AuthConfigVM|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\AuthConfigVM|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets designer_for_anons
     *
     * @return bool|null
     */
    public function getDesignerForAnons()
    {
        return $this->container['designer_for_anons'];
    }

    /**
     * Sets designer_for_anons
     *
     * @param bool|null $designer_for_anons designer_for_anons
     *
     * @return self
     */
    public function setDesignerForAnons($designer_for_anons)
    {
        if (is_null($designer_for_anons)) {
            throw new \InvalidArgumentException('non-nullable designer_for_anons cannot be null');
        }
        $this->container['designer_for_anons'] = $designer_for_anons;

        return $this;
    }

    /**
     * Gets sla_link
     *
     * @return string|null
     */
    public function getSlaLink()
    {
        return $this->container['sla_link'];
    }

    /**
     * Sets sla_link
     *
     * @param string|null $sla_link sla_link
     *
     * @return self
     */
    public function setSlaLink($sla_link)
    {
        if (is_null($sla_link)) {
            array_push($this->openAPINullablesSetToNull, 'sla_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sla_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sla_link'] = $sla_link;

        return $this;
    }

    /**
     * Gets first_steps_video_link
     *
     * @return string|null
     */
    public function getFirstStepsVideoLink()
    {
        return $this->container['first_steps_video_link'];
    }

    /**
     * Sets first_steps_video_link
     *
     * @param string|null $first_steps_video_link first_steps_video_link
     *
     * @return self
     */
    public function setFirstStepsVideoLink($first_steps_video_link)
    {
        if (is_null($first_steps_video_link)) {
            array_push($this->openAPINullablesSetToNull, 'first_steps_video_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_steps_video_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_steps_video_link'] = $first_steps_video_link;

        return $this;
    }

    /**
     * Gets about_link
     *
     * @return string|null
     */
    public function getAboutLink()
    {
        return $this->container['about_link'];
    }

    /**
     * Sets about_link
     *
     * @param string|null $about_link about_link
     *
     * @return self
     */
    public function setAboutLink($about_link)
    {
        if (is_null($about_link)) {
            array_push($this->openAPINullablesSetToNull, 'about_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('about_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['about_link'] = $about_link;

        return $this;
    }

    /**
     * Gets home_page_link
     *
     * @return string|null
     */
    public function getHomePageLink()
    {
        return $this->container['home_page_link'];
    }

    /**
     * Sets home_page_link
     *
     * @param string|null $home_page_link home_page_link
     *
     * @return self
     */
    public function setHomePageLink($home_page_link)
    {
        if (is_null($home_page_link)) {
            array_push($this->openAPINullablesSetToNull, 'home_page_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_page_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_page_link'] = $home_page_link;

        return $this;
    }

    /**
     * Gets auth_server_name
     *
     * @return string|null
     */
    public function getAuthServerName()
    {
        return $this->container['auth_server_name'];
    }

    /**
     * Sets auth_server_name
     *
     * @param string|null $auth_server_name auth_server_name
     *
     * @return self
     */
    public function setAuthServerName($auth_server_name)
    {
        if (is_null($auth_server_name)) {
            array_push($this->openAPINullablesSetToNull, 'auth_server_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auth_server_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auth_server_name'] = $auth_server_name;

        return $this;
    }

    /**
     * Gets update_workspace_link
     *
     * @return string|null
     */
    public function getUpdateWorkspaceLink()
    {
        return $this->container['update_workspace_link'];
    }

    /**
     * Sets update_workspace_link
     *
     * @param string|null $update_workspace_link update_workspace_link
     *
     * @return self
     */
    public function setUpdateWorkspaceLink($update_workspace_link)
    {
        if (is_null($update_workspace_link)) {
            array_push($this->openAPINullablesSetToNull, 'update_workspace_link');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('update_workspace_link', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['update_workspace_link'] = $update_workspace_link;

        return $this;
    }

    /**
     * Gets sharing_enabled
     *
     * @return bool|null
     */
    public function getSharingEnabled()
    {
        return $this->container['sharing_enabled'];
    }

    /**
     * Sets sharing_enabled
     *
     * @param bool|null $sharing_enabled sharing_enabled
     *
     * @return self
     */
    public function setSharingEnabled($sharing_enabled)
    {
        if (is_null($sharing_enabled)) {
            throw new \InvalidArgumentException('non-nullable sharing_enabled cannot be null');
        }
        $this->container['sharing_enabled'] = $sharing_enabled;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


