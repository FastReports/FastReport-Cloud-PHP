<?php
/**
 * TaskSettingsVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskSettingsVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskSettingsVM extends CloudBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskSettingsVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_scheduler_enabled' => 'bool',
        'prepare' => 'bool',
        'export_template' => 'bool',
        'export_report' => 'bool',
        'send_via_email' => 'bool',
        'upload_to_ftp' => 'bool',
        'upload_to_s3' => 'bool',
        'upload_to_telegram' => 'bool',
        'send_via_webhook' => 'bool',
        'fetch_data' => 'bool',
        'thumbnail_report' => 'bool',
        'thumbnail_template' => 'bool',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_scheduler_enabled' => null,
        'prepare' => null,
        'export_template' => null,
        'export_report' => null,
        'send_via_email' => null,
        'upload_to_ftp' => null,
        'upload_to_s3' => null,
        'upload_to_telegram' => null,
        'send_via_webhook' => null,
        'fetch_data' => null,
        'thumbnail_report' => null,
        'thumbnail_template' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_scheduler_enabled' => true,
        'prepare' => true,
        'export_template' => true,
        'export_report' => true,
        'send_via_email' => true,
        'upload_to_ftp' => true,
        'upload_to_s3' => true,
        'upload_to_telegram' => true,
        'send_via_webhook' => true,
        'fetch_data' => true,
        'thumbnail_report' => true,
        'thumbnail_template' => true,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_scheduler_enabled' => 'isSchedulerEnabled',
        'prepare' => 'prepare',
        'export_template' => 'exportTemplate',
        'export_report' => 'exportReport',
        'send_via_email' => 'sendViaEmail',
        'upload_to_ftp' => 'uploadToFTP',
        'upload_to_s3' => 'uploadToS3',
        'upload_to_telegram' => 'uploadToTelegram',
        'send_via_webhook' => 'sendViaWebhook',
        'fetch_data' => 'fetchData',
        'thumbnail_report' => 'thumbnailReport',
        'thumbnail_template' => 'thumbnailTemplate',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_scheduler_enabled' => 'setIsSchedulerEnabled',
        'prepare' => 'setPrepare',
        'export_template' => 'setExportTemplate',
        'export_report' => 'setExportReport',
        'send_via_email' => 'setSendViaEmail',
        'upload_to_ftp' => 'setUploadToFtp',
        'upload_to_s3' => 'setUploadToS3',
        'upload_to_telegram' => 'setUploadToTelegram',
        'send_via_webhook' => 'setSendViaWebhook',
        'fetch_data' => 'setFetchData',
        'thumbnail_report' => 'setThumbnailReport',
        'thumbnail_template' => 'setThumbnailTemplate',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_scheduler_enabled' => 'getIsSchedulerEnabled',
        'prepare' => 'getPrepare',
        'export_template' => 'getExportTemplate',
        'export_report' => 'getExportReport',
        'send_via_email' => 'getSendViaEmail',
        'upload_to_ftp' => 'getUploadToFtp',
        'upload_to_s3' => 'getUploadToS3',
        'upload_to_telegram' => 'getUploadToTelegram',
        'send_via_webhook' => 'getSendViaWebhook',
        'fetch_data' => 'getFetchData',
        'thumbnail_report' => 'getThumbnailReport',
        'thumbnail_template' => 'getThumbnailTemplate',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('is_scheduler_enabled', $data ?? [], null);
        $this->setIfExists('prepare', $data ?? [], null);
        $this->setIfExists('export_template', $data ?? [], null);
        $this->setIfExists('export_report', $data ?? [], null);
        $this->setIfExists('send_via_email', $data ?? [], null);
        $this->setIfExists('upload_to_ftp', $data ?? [], null);
        $this->setIfExists('upload_to_s3', $data ?? [], null);
        $this->setIfExists('upload_to_telegram', $data ?? [], null);
        $this->setIfExists('send_via_webhook', $data ?? [], null);
        $this->setIfExists('fetch_data', $data ?? [], null);
        $this->setIfExists('thumbnail_report', $data ?? [], null);
        $this->setIfExists('thumbnail_template', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_scheduler_enabled
     *
     * @return bool|null
     */
    public function getIsSchedulerEnabled()
    {
        return $this->container['is_scheduler_enabled'];
    }

    /**
     * Sets is_scheduler_enabled
     *
     * @param bool|null $is_scheduler_enabled is_scheduler_enabled
     *
     * @return self
     */
    public function setIsSchedulerEnabled($is_scheduler_enabled)
    {
        if (is_null($is_scheduler_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'is_scheduler_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_scheduler_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_scheduler_enabled'] = $is_scheduler_enabled;

        return $this;
    }

    /**
     * Gets prepare
     *
     * @return bool|null
     */
    public function getPrepare()
    {
        return $this->container['prepare'];
    }

    /**
     * Sets prepare
     *
     * @param bool|null $prepare prepare
     *
     * @return self
     */
    public function setPrepare($prepare)
    {
        if (is_null($prepare)) {
            array_push($this->openAPINullablesSetToNull, 'prepare');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prepare', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['prepare'] = $prepare;

        return $this;
    }

    /**
     * Gets export_template
     *
     * @return bool|null
     */
    public function getExportTemplate()
    {
        return $this->container['export_template'];
    }

    /**
     * Sets export_template
     *
     * @param bool|null $export_template export_template
     *
     * @return self
     */
    public function setExportTemplate($export_template)
    {
        if (is_null($export_template)) {
            array_push($this->openAPINullablesSetToNull, 'export_template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_template'] = $export_template;

        return $this;
    }

    /**
     * Gets export_report
     *
     * @return bool|null
     */
    public function getExportReport()
    {
        return $this->container['export_report'];
    }

    /**
     * Sets export_report
     *
     * @param bool|null $export_report export_report
     *
     * @return self
     */
    public function setExportReport($export_report)
    {
        if (is_null($export_report)) {
            array_push($this->openAPINullablesSetToNull, 'export_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_report'] = $export_report;

        return $this;
    }

    /**
     * Gets send_via_email
     *
     * @return bool|null
     */
    public function getSendViaEmail()
    {
        return $this->container['send_via_email'];
    }

    /**
     * Sets send_via_email
     *
     * @param bool|null $send_via_email send_via_email
     *
     * @return self
     */
    public function setSendViaEmail($send_via_email)
    {
        if (is_null($send_via_email)) {
            array_push($this->openAPINullablesSetToNull, 'send_via_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_via_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_via_email'] = $send_via_email;

        return $this;
    }

    /**
     * Gets upload_to_ftp
     *
     * @return bool|null
     */
    public function getUploadToFtp()
    {
        return $this->container['upload_to_ftp'];
    }

    /**
     * Sets upload_to_ftp
     *
     * @param bool|null $upload_to_ftp upload_to_ftp
     *
     * @return self
     */
    public function setUploadToFtp($upload_to_ftp)
    {
        if (is_null($upload_to_ftp)) {
            array_push($this->openAPINullablesSetToNull, 'upload_to_ftp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_to_ftp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upload_to_ftp'] = $upload_to_ftp;

        return $this;
    }

    /**
     * Gets upload_to_s3
     *
     * @return bool|null
     */
    public function getUploadToS3()
    {
        return $this->container['upload_to_s3'];
    }

    /**
     * Sets upload_to_s3
     *
     * @param bool|null $upload_to_s3 upload_to_s3
     *
     * @return self
     */
    public function setUploadToS3($upload_to_s3)
    {
        if (is_null($upload_to_s3)) {
            array_push($this->openAPINullablesSetToNull, 'upload_to_s3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_to_s3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upload_to_s3'] = $upload_to_s3;

        return $this;
    }

    /**
     * Gets upload_to_telegram
     *
     * @return bool|null
     */
    public function getUploadToTelegram()
    {
        return $this->container['upload_to_telegram'];
    }

    /**
     * Sets upload_to_telegram
     *
     * @param bool|null $upload_to_telegram upload_to_telegram
     *
     * @return self
     */
    public function setUploadToTelegram($upload_to_telegram)
    {
        if (is_null($upload_to_telegram)) {
            array_push($this->openAPINullablesSetToNull, 'upload_to_telegram');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_to_telegram', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upload_to_telegram'] = $upload_to_telegram;

        return $this;
    }

    /**
     * Gets send_via_webhook
     *
     * @return bool|null
     */
    public function getSendViaWebhook()
    {
        return $this->container['send_via_webhook'];
    }

    /**
     * Sets send_via_webhook
     *
     * @param bool|null $send_via_webhook send_via_webhook
     *
     * @return self
     */
    public function setSendViaWebhook($send_via_webhook)
    {
        if (is_null($send_via_webhook)) {
            array_push($this->openAPINullablesSetToNull, 'send_via_webhook');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_via_webhook', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_via_webhook'] = $send_via_webhook;

        return $this;
    }

    /**
     * Gets fetch_data
     *
     * @return bool|null
     */
    public function getFetchData()
    {
        return $this->container['fetch_data'];
    }

    /**
     * Sets fetch_data
     *
     * @param bool|null $fetch_data fetch_data
     *
     * @return self
     */
    public function setFetchData($fetch_data)
    {
        if (is_null($fetch_data)) {
            array_push($this->openAPINullablesSetToNull, 'fetch_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fetch_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fetch_data'] = $fetch_data;

        return $this;
    }

    /**
     * Gets thumbnail_report
     *
     * @return bool|null
     */
    public function getThumbnailReport()
    {
        return $this->container['thumbnail_report'];
    }

    /**
     * Sets thumbnail_report
     *
     * @param bool|null $thumbnail_report thumbnail_report
     *
     * @return self
     */
    public function setThumbnailReport($thumbnail_report)
    {
        if (is_null($thumbnail_report)) {
            array_push($this->openAPINullablesSetToNull, 'thumbnail_report');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumbnail_report', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumbnail_report'] = $thumbnail_report;

        return $this;
    }

    /**
     * Gets thumbnail_template
     *
     * @return bool|null
     */
    public function getThumbnailTemplate()
    {
        return $this->container['thumbnail_template'];
    }

    /**
     * Sets thumbnail_template
     *
     * @param bool|null $thumbnail_template thumbnail_template
     *
     * @return self
     */
    public function setThumbnailTemplate($thumbnail_template)
    {
        if (is_null($thumbnail_template)) {
            array_push($this->openAPINullablesSetToNull, 'thumbnail_template');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumbnail_template', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumbnail_template'] = $thumbnail_template;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


