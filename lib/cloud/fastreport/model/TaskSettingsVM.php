<?php
/**
 * TaskSettingsVM
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TaskSettingsVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TaskSettingsVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskSettingsVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'prepare' => 'bool',
        'export_template' => 'bool',
        'export_report' => 'bool',
        'send_via_email' => 'bool',
        'send_via_webhook' => 'bool',
        'fetch_data' => 'bool',
        'thumbnail_report' => 'bool',
        'thumbnail_template' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'prepare' => null,
        'export_template' => null,
        'export_report' => null,
        'send_via_email' => null,
        'send_via_webhook' => null,
        'fetch_data' => null,
        'thumbnail_report' => null,
        'thumbnail_template' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prepare' => 'prepare',
        'export_template' => 'exportTemplate',
        'export_report' => 'exportReport',
        'send_via_email' => 'sendViaEmail',
        'send_via_webhook' => 'sendViaWebhook',
        'fetch_data' => 'fetchData',
        'thumbnail_report' => 'thumbnailReport',
        'thumbnail_template' => 'thumbnailTemplate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prepare' => 'setPrepare',
        'export_template' => 'setExportTemplate',
        'export_report' => 'setExportReport',
        'send_via_email' => 'setSendViaEmail',
        'send_via_webhook' => 'setSendViaWebhook',
        'fetch_data' => 'setFetchData',
        'thumbnail_report' => 'setThumbnailReport',
        'thumbnail_template' => 'setThumbnailTemplate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prepare' => 'getPrepare',
        'export_template' => 'getExportTemplate',
        'export_report' => 'getExportReport',
        'send_via_email' => 'getSendViaEmail',
        'send_via_webhook' => 'getSendViaWebhook',
        'fetch_data' => 'getFetchData',
        'thumbnail_report' => 'getThumbnailReport',
        'thumbnail_template' => 'getThumbnailTemplate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prepare'] = $data['prepare'] ?? null;
        $this->container['export_template'] = $data['export_template'] ?? null;
        $this->container['export_report'] = $data['export_report'] ?? null;
        $this->container['send_via_email'] = $data['send_via_email'] ?? null;
        $this->container['send_via_webhook'] = $data['send_via_webhook'] ?? null;
        $this->container['fetch_data'] = $data['fetch_data'] ?? null;
        $this->container['thumbnail_report'] = $data['thumbnail_report'] ?? null;
        $this->container['thumbnail_template'] = $data['thumbnail_template'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prepare
     *
     * @return bool|null
     */
    public function getPrepare()
    {
        return $this->container['prepare'];
    }

    /**
     * Sets prepare
     *
     * @param bool|null $prepare prepare
     *
     * @return self
     */
    public function setPrepare($prepare)
    {
        $this->container['prepare'] = $prepare;

        return $this;
    }

    /**
     * Gets export_template
     *
     * @return bool|null
     */
    public function getExportTemplate()
    {
        return $this->container['export_template'];
    }

    /**
     * Sets export_template
     *
     * @param bool|null $export_template export_template
     *
     * @return self
     */
    public function setExportTemplate($export_template)
    {
        $this->container['export_template'] = $export_template;

        return $this;
    }

    /**
     * Gets export_report
     *
     * @return bool|null
     */
    public function getExportReport()
    {
        return $this->container['export_report'];
    }

    /**
     * Sets export_report
     *
     * @param bool|null $export_report export_report
     *
     * @return self
     */
    public function setExportReport($export_report)
    {
        $this->container['export_report'] = $export_report;

        return $this;
    }

    /**
     * Gets send_via_email
     *
     * @return bool|null
     */
    public function getSendViaEmail()
    {
        return $this->container['send_via_email'];
    }

    /**
     * Sets send_via_email
     *
     * @param bool|null $send_via_email send_via_email
     *
     * @return self
     */
    public function setSendViaEmail($send_via_email)
    {
        $this->container['send_via_email'] = $send_via_email;

        return $this;
    }

    /**
     * Gets send_via_webhook
     *
     * @return bool|null
     */
    public function getSendViaWebhook()
    {
        return $this->container['send_via_webhook'];
    }

    /**
     * Sets send_via_webhook
     *
     * @param bool|null $send_via_webhook send_via_webhook
     *
     * @return self
     */
    public function setSendViaWebhook($send_via_webhook)
    {
        $this->container['send_via_webhook'] = $send_via_webhook;

        return $this;
    }

    /**
     * Gets fetch_data
     *
     * @return bool|null
     */
    public function getFetchData()
    {
        return $this->container['fetch_data'];
    }

    /**
     * Sets fetch_data
     *
     * @param bool|null $fetch_data fetch_data
     *
     * @return self
     */
    public function setFetchData($fetch_data)
    {
        $this->container['fetch_data'] = $fetch_data;

        return $this;
    }

    /**
     * Gets thumbnail_report
     *
     * @return bool|null
     */
    public function getThumbnailReport()
    {
        return $this->container['thumbnail_report'];
    }

    /**
     * Sets thumbnail_report
     *
     * @param bool|null $thumbnail_report thumbnail_report
     *
     * @return self
     */
    public function setThumbnailReport($thumbnail_report)
    {
        $this->container['thumbnail_report'] = $thumbnail_report;

        return $this;
    }

    /**
     * Gets thumbnail_template
     *
     * @return bool|null
     */
    public function getThumbnailTemplate()
    {
        return $this->container['thumbnail_template'];
    }

    /**
     * Sets thumbnail_template
     *
     * @param bool|null $thumbnail_template thumbnail_template
     *
     * @return self
     */
    public function setThumbnailTemplate($thumbnail_template)
    {
        $this->container['thumbnail_template'] = $thumbnail_template;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


