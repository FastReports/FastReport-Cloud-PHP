<?php
/**
 * UpdateS3UploadTaskVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateS3UploadTaskVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateS3UploadTaskVM extends UpdateTransportTaskBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateS3UploadTaskVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'access_key' => 'string',
        'secret_key' => 'string',
        'bucket_name' => 'string',
        'destination_folder' => 'string',
        'use_aws' => 'bool',
        'enable_ssl' => 'bool',
        'region' => 'string',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'url' => null,
        'access_key' => null,
        'secret_key' => null,
        'bucket_name' => null,
        'destination_folder' => null,
        'use_aws' => null,
        'enable_ssl' => null,
        'region' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'url' => true,
        'access_key' => true,
        'secret_key' => true,
        'bucket_name' => true,
        'destination_folder' => true,
        'use_aws' => true,
        'enable_ssl' => true,
        'region' => true,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'access_key' => 'accessKey',
        'secret_key' => 'secretKey',
        'bucket_name' => 'bucketName',
        'destination_folder' => 'destinationFolder',
        'use_aws' => 'useAws',
        'enable_ssl' => 'enableSsl',
        'region' => 'region',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'access_key' => 'setAccessKey',
        'secret_key' => 'setSecretKey',
        'bucket_name' => 'setBucketName',
        'destination_folder' => 'setDestinationFolder',
        'use_aws' => 'setUseAws',
        'enable_ssl' => 'setEnableSsl',
        'region' => 'setRegion',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'access_key' => 'getAccessKey',
        'secret_key' => 'getSecretKey',
        'bucket_name' => 'getBucketName',
        'destination_folder' => 'getDestinationFolder',
        'use_aws' => 'getUseAws',
        'enable_ssl' => 'getEnableSsl',
        'region' => 'getRegion',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('secret_key', $data ?? [], null);
        $this->setIfExists('bucket_name', $data ?? [], null);
        $this->setIfExists('destination_folder', $data ?? [], null);
        $this->setIfExists('use_aws', $data ?? [], null);
        $this->setIfExists('enable_ssl', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['access_key']) && (mb_strlen($this->container['access_key']) > 400)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['access_key']) && (mb_strlen($this->container['access_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'access_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) > 400)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['secret_key']) && (mb_strlen($this->container['secret_key']) < 4)) {
            $invalidProperties[] = "invalid value for 'secret_key', the character length must be bigger than or equal to 4.";
        }

        if (!is_null($this->container['bucket_name']) && (mb_strlen($this->container['bucket_name']) > 400)) {
            $invalidProperties[] = "invalid value for 'bucket_name', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['bucket_name']) && (mb_strlen($this->container['bucket_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'bucket_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['destination_folder']) && (mb_strlen($this->container['destination_folder']) > 5000)) {
            $invalidProperties[] = "invalid value for 'destination_folder', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['destination_folder']) && (mb_strlen($this->container['destination_folder']) < 0)) {
            $invalidProperties[] = "invalid value for 'destination_folder', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 20)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) < 0)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string|null
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string|null $access_key access_key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {
        if (is_null($access_key)) {
            array_push($this->openAPINullablesSetToNull, 'access_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('access_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($access_key) && (mb_strlen($access_key) > 400)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling UpdateS3UploadTaskVM., must be smaller than or equal to 400.');
        }
        if (!is_null($access_key) && (mb_strlen($access_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $access_key when calling UpdateS3UploadTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets secret_key
     *
     * @return string|null
     */
    public function getSecretKey()
    {
        return $this->container['secret_key'];
    }

    /**
     * Sets secret_key
     *
     * @param string|null $secret_key secret_key
     *
     * @return self
     */
    public function setSecretKey($secret_key)
    {
        if (is_null($secret_key)) {
            array_push($this->openAPINullablesSetToNull, 'secret_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('secret_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($secret_key) && (mb_strlen($secret_key) > 400)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling UpdateS3UploadTaskVM., must be smaller than or equal to 400.');
        }
        if (!is_null($secret_key) && (mb_strlen($secret_key) < 4)) {
            throw new \InvalidArgumentException('invalid length for $secret_key when calling UpdateS3UploadTaskVM., must be bigger than or equal to 4.');
        }

        $this->container['secret_key'] = $secret_key;

        return $this;
    }

    /**
     * Gets bucket_name
     *
     * @return string|null
     */
    public function getBucketName()
    {
        return $this->container['bucket_name'];
    }

    /**
     * Sets bucket_name
     *
     * @param string|null $bucket_name bucket_name
     *
     * @return self
     */
    public function setBucketName($bucket_name)
    {
        if (is_null($bucket_name)) {
            array_push($this->openAPINullablesSetToNull, 'bucket_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bucket_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($bucket_name) && (mb_strlen($bucket_name) > 400)) {
            throw new \InvalidArgumentException('invalid length for $bucket_name when calling UpdateS3UploadTaskVM., must be smaller than or equal to 400.');
        }
        if (!is_null($bucket_name) && (mb_strlen($bucket_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bucket_name when calling UpdateS3UploadTaskVM., must be bigger than or equal to 1.');
        }

        $this->container['bucket_name'] = $bucket_name;

        return $this;
    }

    /**
     * Gets destination_folder
     *
     * @return string|null
     */
    public function getDestinationFolder()
    {
        return $this->container['destination_folder'];
    }

    /**
     * Sets destination_folder
     *
     * @param string|null $destination_folder destination_folder
     *
     * @return self
     */
    public function setDestinationFolder($destination_folder)
    {
        if (is_null($destination_folder)) {
            array_push($this->openAPINullablesSetToNull, 'destination_folder');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_folder', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($destination_folder) && (mb_strlen($destination_folder) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $destination_folder when calling UpdateS3UploadTaskVM., must be smaller than or equal to 5000.');
        }
        if (!is_null($destination_folder) && (mb_strlen($destination_folder) < 0)) {
            throw new \InvalidArgumentException('invalid length for $destination_folder when calling UpdateS3UploadTaskVM., must be bigger than or equal to 0.');
        }

        $this->container['destination_folder'] = $destination_folder;

        return $this;
    }

    /**
     * Gets use_aws
     *
     * @return bool|null
     */
    public function getUseAws()
    {
        return $this->container['use_aws'];
    }

    /**
     * Sets use_aws
     *
     * @param bool|null $use_aws use_aws
     *
     * @return self
     */
    public function setUseAws($use_aws)
    {
        if (is_null($use_aws)) {
            array_push($this->openAPINullablesSetToNull, 'use_aws');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_aws', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_aws'] = $use_aws;

        return $this;
    }

    /**
     * Gets enable_ssl
     *
     * @return bool|null
     */
    public function getEnableSsl()
    {
        return $this->container['enable_ssl'];
    }

    /**
     * Sets enable_ssl
     *
     * @param bool|null $enable_ssl enable_ssl
     *
     * @return self
     */
    public function setEnableSsl($enable_ssl)
    {
        if (is_null($enable_ssl)) {
            array_push($this->openAPINullablesSetToNull, 'enable_ssl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable_ssl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable_ssl'] = $enable_ssl;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            array_push($this->openAPINullablesSetToNull, 'region');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('region', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($region) && (mb_strlen($region) > 20)) {
            throw new \InvalidArgumentException('invalid length for $region when calling UpdateS3UploadTaskVM., must be smaller than or equal to 20.');
        }
        if (!is_null($region) && (mb_strlen($region) < 0)) {
            throw new \InvalidArgumentException('invalid length for $region when calling UpdateS3UploadTaskVM., must be bigger than or equal to 0.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


