<?php
/**
 * UpdateSubscriptionPlanVM
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateSubscriptionPlanVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateSubscriptionPlanVM extends CloudBaseVM
{
    public const DISCRIMINATOR = 't';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateSubscriptionPlanVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_active' => 'bool',
        'display_name' => 'string',
        'time_period_type' => '\OpenAPI\Client\cloud\fastreport\model\TimePeriodType',
        'time_period' => 'int',
        'templates_space_limit' => 'int',
        'reports_space_limit' => 'int',
        'exports_space_limit' => 'int',
        'file_upload_size_limit' => 'int',
        'data_source_limit' => 'int',
        'max_users_count' => 'int',
        'group_limit' => 'int',
        'online_designer' => 'bool',
        'is_demo' => 'bool',
        'url_to_buy' => 'string',
        'unlimited_page' => 'bool',
        'page_limit' => 'int',
        'readonly_time_limit_type' => '\OpenAPI\Client\cloud\fastreport\model\TimePeriodType',
        'readonly_time_limit' => 'int',
        'tasks' => '\OpenAPI\Client\cloud\fastreport\model\TaskSettingsVM',
        't' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_active' => null,
        'display_name' => null,
        'time_period_type' => null,
        'time_period' => 'int32',
        'templates_space_limit' => 'int64',
        'reports_space_limit' => 'int64',
        'exports_space_limit' => 'int64',
        'file_upload_size_limit' => 'int64',
        'data_source_limit' => 'int32',
        'max_users_count' => 'int32',
        'group_limit' => 'int32',
        'online_designer' => null,
        'is_demo' => null,
        'url_to_buy' => 'uri',
        'unlimited_page' => null,
        'page_limit' => 'int32',
        'readonly_time_limit_type' => null,
        'readonly_time_limit' => 'int32',
        'tasks' => null,
        't' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_active' => true,
        'display_name' => true,
        'time_period_type' => true,
        'time_period' => true,
        'templates_space_limit' => true,
        'reports_space_limit' => true,
        'exports_space_limit' => true,
        'file_upload_size_limit' => true,
        'data_source_limit' => true,
        'max_users_count' => true,
        'group_limit' => true,
        'online_designer' => true,
        'is_demo' => true,
        'url_to_buy' => true,
        'unlimited_page' => true,
        'page_limit' => true,
        'readonly_time_limit_type' => true,
        'readonly_time_limit' => true,
        'tasks' => false,
        't' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_active' => 'isActive',
        'display_name' => 'displayName',
        'time_period_type' => 'timePeriodType',
        'time_period' => 'timePeriod',
        'templates_space_limit' => 'templatesSpaceLimit',
        'reports_space_limit' => 'reportsSpaceLimit',
        'exports_space_limit' => 'exportsSpaceLimit',
        'file_upload_size_limit' => 'fileUploadSizeLimit',
        'data_source_limit' => 'dataSourceLimit',
        'max_users_count' => 'maxUsersCount',
        'group_limit' => 'groupLimit',
        'online_designer' => 'onlineDesigner',
        'is_demo' => 'isDemo',
        'url_to_buy' => 'urlToBuy',
        'unlimited_page' => 'unlimitedPage',
        'page_limit' => 'pageLimit',
        'readonly_time_limit_type' => 'readonlyTimeLimitType',
        'readonly_time_limit' => 'readonlyTimeLimit',
        'tasks' => 'tasks',
        't' => '$t'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_active' => 'setIsActive',
        'display_name' => 'setDisplayName',
        'time_period_type' => 'setTimePeriodType',
        'time_period' => 'setTimePeriod',
        'templates_space_limit' => 'setTemplatesSpaceLimit',
        'reports_space_limit' => 'setReportsSpaceLimit',
        'exports_space_limit' => 'setExportsSpaceLimit',
        'file_upload_size_limit' => 'setFileUploadSizeLimit',
        'data_source_limit' => 'setDataSourceLimit',
        'max_users_count' => 'setMaxUsersCount',
        'group_limit' => 'setGroupLimit',
        'online_designer' => 'setOnlineDesigner',
        'is_demo' => 'setIsDemo',
        'url_to_buy' => 'setUrlToBuy',
        'unlimited_page' => 'setUnlimitedPage',
        'page_limit' => 'setPageLimit',
        'readonly_time_limit_type' => 'setReadonlyTimeLimitType',
        'readonly_time_limit' => 'setReadonlyTimeLimit',
        'tasks' => 'setTasks',
        't' => 'setT'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_active' => 'getIsActive',
        'display_name' => 'getDisplayName',
        'time_period_type' => 'getTimePeriodType',
        'time_period' => 'getTimePeriod',
        'templates_space_limit' => 'getTemplatesSpaceLimit',
        'reports_space_limit' => 'getReportsSpaceLimit',
        'exports_space_limit' => 'getExportsSpaceLimit',
        'file_upload_size_limit' => 'getFileUploadSizeLimit',
        'data_source_limit' => 'getDataSourceLimit',
        'max_users_count' => 'getMaxUsersCount',
        'group_limit' => 'getGroupLimit',
        'online_designer' => 'getOnlineDesigner',
        'is_demo' => 'getIsDemo',
        'url_to_buy' => 'getUrlToBuy',
        'unlimited_page' => 'getUnlimitedPage',
        'page_limit' => 'getPageLimit',
        'readonly_time_limit_type' => 'getReadonlyTimeLimitType',
        'readonly_time_limit' => 'getReadonlyTimeLimit',
        'tasks' => 'getTasks',
        't' => 'getT'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }



    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('time_period_type', $data ?? [], null);
        $this->setIfExists('time_period', $data ?? [], null);
        $this->setIfExists('templates_space_limit', $data ?? [], null);
        $this->setIfExists('reports_space_limit', $data ?? [], null);
        $this->setIfExists('exports_space_limit', $data ?? [], null);
        $this->setIfExists('file_upload_size_limit', $data ?? [], null);
        $this->setIfExists('data_source_limit', $data ?? [], null);
        $this->setIfExists('max_users_count', $data ?? [], null);
        $this->setIfExists('group_limit', $data ?? [], null);
        $this->setIfExists('online_designer', $data ?? [], null);
        $this->setIfExists('is_demo', $data ?? [], null);
        $this->setIfExists('url_to_buy', $data ?? [], null);
        $this->setIfExists('unlimited_page', $data ?? [], null);
        $this->setIfExists('page_limit', $data ?? [], null);
        $this->setIfExists('readonly_time_limit_type', $data ?? [], null);
        $this->setIfExists('readonly_time_limit', $data ?? [], null);
        $this->setIfExists('tasks', $data ?? [], null);
        $this->setIfExists('t', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['t'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['time_period']) && ($this->container['time_period'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'time_period', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['time_period']) && ($this->container['time_period'] < 1)) {
            $invalidProperties[] = "invalid value for 'time_period', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['templates_space_limit']) && ($this->container['templates_space_limit'] < 1048576)) {
            $invalidProperties[] = "invalid value for 'templates_space_limit', must be bigger than or equal to 1048576.";
        }

        if (!is_null($this->container['reports_space_limit']) && ($this->container['reports_space_limit'] < 1048576)) {
            $invalidProperties[] = "invalid value for 'reports_space_limit', must be bigger than or equal to 1048576.";
        }

        if (!is_null($this->container['exports_space_limit']) && ($this->container['exports_space_limit'] < 1048576)) {
            $invalidProperties[] = "invalid value for 'exports_space_limit', must be bigger than or equal to 1048576.";
        }

        if (!is_null($this->container['file_upload_size_limit']) && ($this->container['file_upload_size_limit'] > 1073741824)) {
            $invalidProperties[] = "invalid value for 'file_upload_size_limit', must be smaller than or equal to 1073741824.";
        }

        if (!is_null($this->container['file_upload_size_limit']) && ($this->container['file_upload_size_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'file_upload_size_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['data_source_limit']) && ($this->container['data_source_limit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'data_source_limit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['data_source_limit']) && ($this->container['data_source_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'data_source_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_users_count']) && ($this->container['max_users_count'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_users_count', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_users_count']) && ($this->container['max_users_count'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_users_count', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['group_limit']) && ($this->container['group_limit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'group_limit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['group_limit']) && ($this->container['group_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'group_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url_to_buy']) && (mb_strlen($this->container['url_to_buy']) > 1000)) {
            $invalidProperties[] = "invalid value for 'url_to_buy', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['url_to_buy']) && (mb_strlen($this->container['url_to_buy']) < 0)) {
            $invalidProperties[] = "invalid value for 'url_to_buy', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['page_limit']) && ($this->container['page_limit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'page_limit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['page_limit']) && ($this->container['page_limit'] < 0)) {
            $invalidProperties[] = "invalid value for 'page_limit', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['readonly_time_limit']) && ($this->container['readonly_time_limit'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'readonly_time_limit', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['readonly_time_limit']) && ($this->container['readonly_time_limit'] < 1)) {
            $invalidProperties[] = "invalid value for 'readonly_time_limit', must be bigger than or equal to 1.";
        }

        if ($this->container['t'] === null) {
            $invalidProperties[] = "'t' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            array_push($this->openAPINullablesSetToNull, 'is_active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            array_push($this->openAPINullablesSetToNull, 'display_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('display_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($display_name) && (mb_strlen($display_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 50.');
        }
        if (!is_null($display_name) && (mb_strlen($display_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets time_period_type
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\TimePeriodType|null
     */
    public function getTimePeriodType()
    {
        return $this->container['time_period_type'];
    }

    /**
     * Sets time_period_type
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\TimePeriodType|null $time_period_type time_period_type
     *
     * @return self
     */
    public function setTimePeriodType($time_period_type)
    {
        if (is_null($time_period_type)) {
            array_push($this->openAPINullablesSetToNull, 'time_period_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_period_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_period_type'] = $time_period_type;

        return $this;
    }

    /**
     * Gets time_period
     *
     * @return int|null
     */
    public function getTimePeriod()
    {
        return $this->container['time_period'];
    }

    /**
     * Sets time_period
     *
     * @param int|null $time_period time_period
     *
     * @return self
     */
    public function setTimePeriod($time_period)
    {
        if (is_null($time_period)) {
            array_push($this->openAPINullablesSetToNull, 'time_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($time_period) && ($time_period > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $time_period when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($time_period) && ($time_period < 1)) {
            throw new \InvalidArgumentException('invalid value for $time_period when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1.');
        }

        $this->container['time_period'] = $time_period;

        return $this;
    }

    /**
     * Gets templates_space_limit
     *
     * @return int|null
     */
    public function getTemplatesSpaceLimit()
    {
        return $this->container['templates_space_limit'];
    }

    /**
     * Sets templates_space_limit
     *
     * @param int|null $templates_space_limit templates_space_limit
     *
     * @return self
     */
    public function setTemplatesSpaceLimit($templates_space_limit)
    {
        if (is_null($templates_space_limit)) {
            array_push($this->openAPINullablesSetToNull, 'templates_space_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('templates_space_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($templates_space_limit) && ($templates_space_limit < 1048576)) {
            throw new \InvalidArgumentException('invalid value for $templates_space_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1048576.');
        }

        $this->container['templates_space_limit'] = $templates_space_limit;

        return $this;
    }

    /**
     * Gets reports_space_limit
     *
     * @return int|null
     */
    public function getReportsSpaceLimit()
    {
        return $this->container['reports_space_limit'];
    }

    /**
     * Sets reports_space_limit
     *
     * @param int|null $reports_space_limit reports_space_limit
     *
     * @return self
     */
    public function setReportsSpaceLimit($reports_space_limit)
    {
        if (is_null($reports_space_limit)) {
            array_push($this->openAPINullablesSetToNull, 'reports_space_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reports_space_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($reports_space_limit) && ($reports_space_limit < 1048576)) {
            throw new \InvalidArgumentException('invalid value for $reports_space_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1048576.');
        }

        $this->container['reports_space_limit'] = $reports_space_limit;

        return $this;
    }

    /**
     * Gets exports_space_limit
     *
     * @return int|null
     */
    public function getExportsSpaceLimit()
    {
        return $this->container['exports_space_limit'];
    }

    /**
     * Sets exports_space_limit
     *
     * @param int|null $exports_space_limit exports_space_limit
     *
     * @return self
     */
    public function setExportsSpaceLimit($exports_space_limit)
    {
        if (is_null($exports_space_limit)) {
            array_push($this->openAPINullablesSetToNull, 'exports_space_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exports_space_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($exports_space_limit) && ($exports_space_limit < 1048576)) {
            throw new \InvalidArgumentException('invalid value for $exports_space_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1048576.');
        }

        $this->container['exports_space_limit'] = $exports_space_limit;

        return $this;
    }

    /**
     * Gets file_upload_size_limit
     *
     * @return int|null
     */
    public function getFileUploadSizeLimit()
    {
        return $this->container['file_upload_size_limit'];
    }

    /**
     * Sets file_upload_size_limit
     *
     * @param int|null $file_upload_size_limit file_upload_size_limit
     *
     * @return self
     */
    public function setFileUploadSizeLimit($file_upload_size_limit)
    {
        if (is_null($file_upload_size_limit)) {
            array_push($this->openAPINullablesSetToNull, 'file_upload_size_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_upload_size_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($file_upload_size_limit) && ($file_upload_size_limit > 1073741824)) {
            throw new \InvalidArgumentException('invalid value for $file_upload_size_limit when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 1073741824.');
        }
        if (!is_null($file_upload_size_limit) && ($file_upload_size_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $file_upload_size_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['file_upload_size_limit'] = $file_upload_size_limit;

        return $this;
    }

    /**
     * Gets data_source_limit
     *
     * @return int|null
     */
    public function getDataSourceLimit()
    {
        return $this->container['data_source_limit'];
    }

    /**
     * Sets data_source_limit
     *
     * @param int|null $data_source_limit data_source_limit
     *
     * @return self
     */
    public function setDataSourceLimit($data_source_limit)
    {
        if (is_null($data_source_limit)) {
            array_push($this->openAPINullablesSetToNull, 'data_source_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data_source_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($data_source_limit) && ($data_source_limit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $data_source_limit when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($data_source_limit) && ($data_source_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $data_source_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['data_source_limit'] = $data_source_limit;

        return $this;
    }

    /**
     * Gets max_users_count
     *
     * @return int|null
     */
    public function getMaxUsersCount()
    {
        return $this->container['max_users_count'];
    }

    /**
     * Sets max_users_count
     *
     * @param int|null $max_users_count max_users_count
     *
     * @return self
     */
    public function setMaxUsersCount($max_users_count)
    {
        if (is_null($max_users_count)) {
            array_push($this->openAPINullablesSetToNull, 'max_users_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_users_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($max_users_count) && ($max_users_count > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_users_count when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_users_count) && ($max_users_count < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_users_count when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['max_users_count'] = $max_users_count;

        return $this;
    }

    /**
     * Gets group_limit
     *
     * @return int|null
     */
    public function getGroupLimit()
    {
        return $this->container['group_limit'];
    }

    /**
     * Sets group_limit
     *
     * @param int|null $group_limit group_limit
     *
     * @return self
     */
    public function setGroupLimit($group_limit)
    {
        if (is_null($group_limit)) {
            array_push($this->openAPINullablesSetToNull, 'group_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($group_limit) && ($group_limit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $group_limit when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($group_limit) && ($group_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $group_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['group_limit'] = $group_limit;

        return $this;
    }

    /**
     * Gets online_designer
     *
     * @return bool|null
     */
    public function getOnlineDesigner()
    {
        return $this->container['online_designer'];
    }

    /**
     * Sets online_designer
     *
     * @param bool|null $online_designer online_designer
     *
     * @return self
     */
    public function setOnlineDesigner($online_designer)
    {
        if (is_null($online_designer)) {
            array_push($this->openAPINullablesSetToNull, 'online_designer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('online_designer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['online_designer'] = $online_designer;

        return $this;
    }

    /**
     * Gets is_demo
     *
     * @return bool|null
     */
    public function getIsDemo()
    {
        return $this->container['is_demo'];
    }

    /**
     * Sets is_demo
     *
     * @param bool|null $is_demo is_demo
     *
     * @return self
     */
    public function setIsDemo($is_demo)
    {
        if (is_null($is_demo)) {
            array_push($this->openAPINullablesSetToNull, 'is_demo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_demo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_demo'] = $is_demo;

        return $this;
    }

    /**
     * Gets url_to_buy
     *
     * @return string|null
     */
    public function getUrlToBuy()
    {
        return $this->container['url_to_buy'];
    }

    /**
     * Sets url_to_buy
     *
     * @param string|null $url_to_buy url_to_buy
     *
     * @return self
     */
    public function setUrlToBuy($url_to_buy)
    {
        if (is_null($url_to_buy)) {
            array_push($this->openAPINullablesSetToNull, 'url_to_buy');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url_to_buy', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($url_to_buy) && (mb_strlen($url_to_buy) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $url_to_buy when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 1000.');
        }
        if (!is_null($url_to_buy) && (mb_strlen($url_to_buy) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url_to_buy when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['url_to_buy'] = $url_to_buy;

        return $this;
    }

    /**
     * Gets unlimited_page
     *
     * @return bool|null
     */
    public function getUnlimitedPage()
    {
        return $this->container['unlimited_page'];
    }

    /**
     * Sets unlimited_page
     *
     * @param bool|null $unlimited_page unlimited_page
     *
     * @return self
     */
    public function setUnlimitedPage($unlimited_page)
    {
        if (is_null($unlimited_page)) {
            array_push($this->openAPINullablesSetToNull, 'unlimited_page');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unlimited_page', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unlimited_page'] = $unlimited_page;

        return $this;
    }

    /**
     * Gets page_limit
     *
     * @return int|null
     */
    public function getPageLimit()
    {
        return $this->container['page_limit'];
    }

    /**
     * Sets page_limit
     *
     * @param int|null $page_limit page_limit
     *
     * @return self
     */
    public function setPageLimit($page_limit)
    {
        if (is_null($page_limit)) {
            array_push($this->openAPINullablesSetToNull, 'page_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($page_limit) && ($page_limit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $page_limit when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($page_limit) && ($page_limit < 0)) {
            throw new \InvalidArgumentException('invalid value for $page_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 0.');
        }

        $this->container['page_limit'] = $page_limit;

        return $this;
    }

    /**
     * Gets readonly_time_limit_type
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\TimePeriodType|null
     */
    public function getReadonlyTimeLimitType()
    {
        return $this->container['readonly_time_limit_type'];
    }

    /**
     * Sets readonly_time_limit_type
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\TimePeriodType|null $readonly_time_limit_type readonly_time_limit_type
     *
     * @return self
     */
    public function setReadonlyTimeLimitType($readonly_time_limit_type)
    {
        if (is_null($readonly_time_limit_type)) {
            array_push($this->openAPINullablesSetToNull, 'readonly_time_limit_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('readonly_time_limit_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['readonly_time_limit_type'] = $readonly_time_limit_type;

        return $this;
    }

    /**
     * Gets readonly_time_limit
     *
     * @return int|null
     */
    public function getReadonlyTimeLimit()
    {
        return $this->container['readonly_time_limit'];
    }

    /**
     * Sets readonly_time_limit
     *
     * @param int|null $readonly_time_limit readonly_time_limit
     *
     * @return self
     */
    public function setReadonlyTimeLimit($readonly_time_limit)
    {
        if (is_null($readonly_time_limit)) {
            array_push($this->openAPINullablesSetToNull, 'readonly_time_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('readonly_time_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($readonly_time_limit) && ($readonly_time_limit > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $readonly_time_limit when calling UpdateSubscriptionPlanVM., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($readonly_time_limit) && ($readonly_time_limit < 1)) {
            throw new \InvalidArgumentException('invalid value for $readonly_time_limit when calling UpdateSubscriptionPlanVM., must be bigger than or equal to 1.');
        }

        $this->container['readonly_time_limit'] = $readonly_time_limit;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \OpenAPI\Client\cloud\fastreport\model\TaskSettingsVM|null
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \OpenAPI\Client\cloud\fastreport\model\TaskSettingsVM|null $tasks tasks
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        if (is_null($tasks)) {
            throw new \InvalidArgumentException('non-nullable tasks cannot be null');
        }
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets t
     *
     * @return string
     */
    public function getT()
    {
        return $this->container['t'];
    }

    /**
     * Sets t
     *
     * @param string $t t
     *
     * @return self
     */
    public function setT($t)
    {
        if (is_null($t)) {
            throw new \InvalidArgumentException('non-nullable t cannot be null');
        }
        $this->container['t'] = $t;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


