<?php
/**
 * UpdateUserProfileVM
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\cloud\fastreport\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateUserProfileVM Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UpdateUserProfileVM implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateUserProfileVM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'username' => 'string',
        'email' => 'string',
        'password_new' => 'string',
        'password_new2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'username' => null,
        'email' => 'email',
        'password_new' => null,
        'password_new2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'username' => 'username',
        'email' => 'email',
        'password_new' => 'passwordNew',
        'password_new2' => 'passwordNew2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'password_new' => 'setPasswordNew',
        'password_new2' => 'setPasswordNew2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'password_new' => 'getPasswordNew',
        'password_new2' => 'getPasswordNew2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['username'] = $data['username'] ?? null;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['password_new'] = $data['password_new'] ?? null;
        $this->container['password_new2'] = $data['password_new2'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) > 50)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['username']) && (mb_strlen($this->container['username']) < 0)) {
            $invalidProperties[] = "invalid value for 'username', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 250)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 0)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['password_new']) && (mb_strlen($this->container['password_new']) > 255)) {
            $invalidProperties[] = "invalid value for 'password_new', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['password_new']) && (mb_strlen($this->container['password_new']) < 5)) {
            $invalidProperties[] = "invalid value for 'password_new', the character length must be bigger than or equal to 5.";
        }

        if (!is_null($this->container['password_new2']) && (mb_strlen($this->container['password_new2']) > 255)) {
            $invalidProperties[] = "invalid value for 'password_new2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['password_new2']) && (mb_strlen($this->container['password_new2']) < 5)) {
            $invalidProperties[] = "invalid value for 'password_new2', the character length must be bigger than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling UpdateUserProfileVM., must be smaller than or equal to 50.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling UpdateUserProfileVM., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (!is_null($username) && (mb_strlen($username) > 50)) {
            throw new \InvalidArgumentException('invalid length for $username when calling UpdateUserProfileVM., must be smaller than or equal to 50.');
        }
        if (!is_null($username) && (mb_strlen($username) < 0)) {
            throw new \InvalidArgumentException('invalid length for $username when calling UpdateUserProfileVM., must be bigger than or equal to 0.');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (!is_null($email) && (mb_strlen($email) > 250)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UpdateUserProfileVM., must be smaller than or equal to 250.');
        }
        if (!is_null($email) && (mb_strlen($email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $email when calling UpdateUserProfileVM., must be bigger than or equal to 0.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password_new
     *
     * @return string|null
     */
    public function getPasswordNew()
    {
        return $this->container['password_new'];
    }

    /**
     * Sets password_new
     *
     * @param string|null $password_new password_new
     *
     * @return self
     */
    public function setPasswordNew($password_new)
    {
        if (!is_null($password_new) && (mb_strlen($password_new) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password_new when calling UpdateUserProfileVM., must be smaller than or equal to 255.');
        }
        if (!is_null($password_new) && (mb_strlen($password_new) < 5)) {
            throw new \InvalidArgumentException('invalid length for $password_new when calling UpdateUserProfileVM., must be bigger than or equal to 5.');
        }

        $this->container['password_new'] = $password_new;

        return $this;
    }

    /**
     * Gets password_new2
     *
     * @return string|null
     */
    public function getPasswordNew2()
    {
        return $this->container['password_new2'];
    }

    /**
     * Sets password_new2
     *
     * @param string|null $password_new2 password_new2
     *
     * @return self
     */
    public function setPasswordNew2($password_new2)
    {
        if (!is_null($password_new2) && (mb_strlen($password_new2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $password_new2 when calling UpdateUserProfileVM., must be smaller than or equal to 255.');
        }
        if (!is_null($password_new2) && (mb_strlen($password_new2) < 5)) {
            throw new \InvalidArgumentException('invalid length for $password_new2 when calling UpdateUserProfileVM., must be bigger than or equal to 5.');
        }

        $this->container['password_new2'] = $password_new2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


