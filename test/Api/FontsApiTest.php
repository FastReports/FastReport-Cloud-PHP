<?php
/**
 * FontsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FastReport Cloud
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FontsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FontsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for fontsAddPublicFont
     *
     * Allows user to add a font from a list of public fonts to their subscription.
     *
     */
    public function testFontsAddPublicFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsCountFontsAsync
     *
     * Returns a number of fonts in a subscription.
     *
     */
    public function testFontsCountFontsAsync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsCountOccupiedSpace
     *
     * returns storage space occupied by fonts in the subscription.
     *
     */
    public function testFontsCountOccupiedSpace()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsCountPublicFontsAsync
     *
     * Returns a number of pulbic fonts.
     *
     */
    public function testFontsCountPublicFontsAsync()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsDeleteFont
     *
     * deletes a font from the subscirption by id.
     *
     */
    public function testFontsDeleteFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsDownloadFont
     *
     * Downloads font by it's id.
     *
     */
    public function testFontsDownloadFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsDownloadPublicFont
     *
     * Downloads a public font by it's id.
     *
     */
    public function testFontsDownloadPublicFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontFamilies
     *
     * Returns distinct font names from public and private font lists (excluding disabled fonts).
     *
     */
    public function testFontsGetFontFamilies()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFonts
     *
     * returns a list of fonts in the subscription.
     *
     */
    public function testFontsGetFonts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontsByReport
     *
     * Returns a list of fonts in the subscription by report id..
     *
     */
    public function testFontsGetFontsByReport()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontsByTemplate
     *
     * Returns a list of fonts in the subscription by report id..
     *
     */
    public function testFontsGetFontsByTemplate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontsCss
     *
     * Creates a css stylesheet for a public font.
     *
     */
    public function testFontsGetFontsCss()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontsCssByReport
     *
     * Creates a css stylesheet for a public fonts by report..
     *
     */
    public function testFontsGetFontsCssByReport()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetFontsCssByTemplate
     *
     * Creates a css stylesheet for a public font by template..
     *
     */
    public function testFontsGetFontsCssByTemplate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetMyPermissions
     *
     * Get current user's permissions to a font.
     *
     */
    public function testFontsGetMyPermissions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetPermissions
     *
     * Get font's permissions.
     *
     */
    public function testFontsGetPermissions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetPublicFonts
     *
     * Returns a list of public fonts.
     *
     */
    public function testFontsGetPublicFonts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsGetPublicFontsCss
     *
     * Creates a css stylesheet for a public font.
     *
     */
    public function testFontsGetPublicFontsCss()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsUpdateFont
     *
     * updates a user font model.
     *
     */
    public function testFontsUpdateFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsUpdatePermissions
     *
     * Update permissions.
     *
     */
    public function testFontsUpdatePermissions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fontsUploadFont
     *
     * Allows user to upload a new truetype font to their subscription.
     *
     */
    public function testFontsUploadFont()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
